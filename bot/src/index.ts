// bot/src/index.ts
import { config } from "dotenv";
import { Bot, InlineKeyboard, InputFile } from "grammy";
import * as database from "database";
import path from "path";
import { NextFunction } from "grammy";
import fs from "fs";
type User = Awaited<ReturnType<typeof database.findUserByTelegramId>>;

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
config({ path: path.resolve(__dirname, "../../.env") });

const token = process.env.TELEGRAM_BOT_TOKEN;
const webappUrl =
  process.env.WEBAPP_URL || "https://—Ç–≤–æ–π-ngrok-url.ngrok-free.app";

if (!token) {
  throw new Error("TELEGRAM_BOT_TOKEN environment variable is required");
}

const bot = new Bot(token);
const channelUrl = "https://t.me/reactorgift"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
const isProduction = process.env.production === "production";
const webappKb = new InlineKeyboard()
  .webApp("üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", webappUrl)
  .row() // –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–ª–µ–¥—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
  .url("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", channelUrl);
// üöÄ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function ensureUser(ctx: any): Promise<User | null> {
  const telegramUser = ctx.from;
  if (!telegramUser) return null;

  try {
    const user = await database.createOrUpdateUser({
      telegramId: telegramUser.id.toString(),
      username: telegramUser.username,
      firstName: telegramUser.first_name,
      lastName: telegramUser.last_name,
      photoUrl: telegramUser.photo_url,
    });

    console.log(`üë§ User ${user.telegramId} activity tracked`);
    return user;
  } catch (error) {
    console.error("Error ensuring user:", error);
    return null;
  }
}

function getAdminIds(): string[] {
  const adminIds = process.env.ADMIN_TELEGRAM_ID;
  if (!adminIds) return [];

  return adminIds
    .split(",")
    .map((id) => id.trim())
    .filter((id) => id.length > 0);
}

async function checkAdmin(ctx: any, next: NextFunction) {
  const adminIds = getAdminIds();
  const chatId = ctx.chat?.id?.toString();
  const telegramUser = ctx.from;

  console.log(telegramUser);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö
  if (adminIds.length > 0 && chatId && adminIds.includes(chatId)) {
    return next();
  }

  // –ï—Å–ª–∏ —é–∑–µ—Ä –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ ID —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤
  if (telegramUser) {
    const telegramId = telegramUser.id.toString();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ env
    if (adminIds.includes(telegramId)) {
      return next();
    }

    try {
      const user = await database.findUserByTelegramId(telegramId);
      if (user?.role === "ADMIN") {
        return next();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏:", error);
      return;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω ‚Äî –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  return;
}
// –ú–∏–¥–ª–≤–∞—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function validateUser(ctx: any, next: NextFunction) {
  const telegramUser = ctx.from;

  if (!telegramUser) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username
  // if (!telegramUser.username || telegramUser.username.trim() === "") {
  //   await ctx.reply("–ø–∏—à–µ—Ç –ø—Ä–∏–≤–µ—Ç —Ç–µ–±–µ —á—É–≤–∞–∫");
  //   return;
  // }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const containsSuspiciousContent = (text: string | undefined): boolean => {
    if (!text) return false;

    const suspiciousPatterns = [
      /t\.me\//i, // t.me/
      /telegram\.me\//i, // telegram.me/
      /tg:\/\//i, // tg://
      /http[s]?:\/\//i, // –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏
    ];

    return suspiciousPatterns.some((pattern) => pattern.test(text));
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º firstName –∏ lastName –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
  if (
    containsSuspiciousContent(telegramUser.first_name) ||
    containsSuspiciousContent(telegramUser.last_name) ||
    containsSuspiciousContent(telegramUser.username)
  ) {
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(
      `üö´ Suspicious user blocked: ${telegramUser.id} | Username: ${telegramUser.username} | FirstName: ${telegramUser.first_name} | LastName: ${telegramUser.last_name}`
    );

    // –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º - –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∏—á–µ–≥–æ
    return;
  }

  // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  return next();
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–¥–ª–≤–∞—Ä–∏–Ω—É –∫–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ –∫–æ–º–∞–Ω–¥–∞–º
bot.use(validateUser);

// –¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

bot.command("test_photo", checkAdmin, async (ctx) => {
  const photoPath = path.resolve(__dirname, "../assets/welcome.png");

  if (fs.existsSync(photoPath)) {
    const photo = new InputFile(photoPath);
    const sentMessage = await ctx.replyWithPhoto(photo, {
      caption: "–¢–µ—Å—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏",
    });

    if (sentMessage.photo && sentMessage.photo.length > 0) {
      const fileId = sentMessage.photo[sentMessage.photo.length - 1].file_id;
      await ctx.reply(`File ID: <code>${fileId}</code>`, {
        parse_mode: "HTML",
      });
      console.log("File ID:", fileId);
    }
  } else {
    console.log("No..");
  }
});

bot.command("start", async (ctx) => {
  const startPayload = ctx.match;
  const telegramId = ctx.from!.id.toString();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const existingUser = await database.findUserByTelegramId(telegramId);

  const firstName = ctx.from?.username || ctx.from?.first_name || "–¥—Ä—É–≥";

  // File ID –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  const welcomePhotoFileId =
    "AgACAgIAAxkDAAMGaJu2p3BxlqGvyeup-Mak9t0OIq0AAv77MRvzWtlIB1bgVqWggacBAAMCAAN5AAM2BA";

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
  const sendWelcomeMessage = async (greeting: string) => {
    const message = `<b>${greeting}, ${firstName}! üéâ</b>\n\nüéÅ –õ–æ–≤–∏ –ø–æ–¥–∞—Ä–∫–∏, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã –∏ —É—á–∞—Å—Ç–≤—É–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö`;

    await ctx.replyWithPhoto(welcomePhotoFileId, {
      caption: message,
      parse_mode: "HTML",
      reply_markup: webappKb,
    });
    // } else {
    // await ctx.reply(message, {
    //   parse_mode: "HTML",
    //   reply_markup: webappKb,
    // });
    // }
  };

  if (existingUser) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (startPayload?.startsWith("ref_")) {
      console.log(
        `üö´ User ${telegramId} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è`
      );
      // –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await sendWelcomeMessage("–ü—Ä–∏–≤–µ—Ç");
    } else {
      // –û–±—ã—á–Ω—ã–π –∑–∞—Ö–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await sendWelcomeMessage("–ü—Ä–∏–≤–µ—Ç");
    }
    return;
  }

  // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (startPayload?.startsWith("ref_")) {
    const referrerTelegramId = startPayload.replace("ref_", "");

    // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ telegramId
    const referrer = await database.findUserByTelegramId(referrerTelegramId);

    if (referrer && referrer.telegramId !== telegramId) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = await ensureUser(ctx);

      if (newUser) {
        try {
          await database.createReferral({
            referrerId: referrer.id,
            referredId: newUser.id,
            reward: 0, // üëà 0 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞
          });

          console.log(
            `‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: ${referrer.telegramId} -> ${newUser.telegramId}`
          );

          // const rewardStars = 5;

          // const notificationText = `<b>üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ <b>${rewardStars} ‚≠ê</b>.`;

          // await bot.api.sendMessage(referrer.telegramId, notificationText, {
          //   parse_mode: "HTML",
          //   reply_markup: webappKb,
          // });
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:", error);
        }
      }
      await sendWelcomeMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å");
    } else {
      console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: ${referrerTelegramId}`);
      await ensureUser(ctx);
      await sendWelcomeMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å");
    }
  } else {
    // –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ensureUser(ctx);
    await sendWelcomeMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å");
  }
});

bot.command("add_admin", checkAdmin, async (ctx) => {
  const args = ctx.match?.split(" ");
  const newAdminTelegramId = ctx.match?.trim();

  if (!newAdminTelegramId) {
    await ctx.reply(
      "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    );
    return;
  }

  try {
    const userToUpdate = await database.findUserByTelegramId(
      newAdminTelegramId
    );

    if (!userToUpdate) {
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    await database.updateUserRole(newAdminTelegramId, "ADMIN");

    await ctx.reply(
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newAdminTelegramId} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`
    );
  } catch (error) {
    console.error(error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
  }
});
bot.command("remove_admin", checkAdmin, async (ctx) => {
  const newAdminTelegramId = ctx.match?.trim();

  if (!newAdminTelegramId) {
    await ctx.reply(
      "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
    );
    return;
  }

  try {
    const userToUpdate = await database.findUserByTelegramId(
      newAdminTelegramId
    );

    if (!userToUpdate) {
      await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    await database.updateUserRole(newAdminTelegramId, "USER");

    await ctx.reply(
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newAdminTelegramId} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`
    );
  } catch (error) {
    console.error(error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
  }
});

bot.command("invoice", checkAdmin, async (ctx) => {
  const amount = parseInt(ctx.match?.trim() || "0");

  if (!amount || amount <= 0) {
    await ctx.reply(
      "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∑–≤–µ–∑–¥.\n–ü—Ä–∏–º–µ—Ä: /invoice 5000"
    );
    return;
  }

  if (amount > 50000) {
    await ctx.reply("‚ùó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞ —Ä–∞–∑: 50,000 –∑–≤–µ–∑–¥");
    return;
  }

  try {
    await ctx.api.sendInvoice(
      ctx.chat.id,
      "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞",
      `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –Ω–∞ ${amount} –∑–≤–µ–∑–¥`,
      `bot_refill_${amount}_${Date.now()}`,
      "XTR",
      [
        {
          label: `${amount} Telegram Stars`,
          amount: amount,
        },
      ]
    );

    console.log(`üí∞ Admin ${ctx.from?.id} created invoice for ${amount} stars`);
  } catch (error) {
    console.error("Error creating invoice:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
bot.on("message:successful_payment", async (ctx) => {
  const payment = ctx.message.successful_payment;
  const amount = payment.total_amount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
  const payload = payment.invoice_payload;

  console.log(`‚úÖ Payment received: ${amount} stars, payload: ${payload}`);

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞

  await ctx.reply(
    `üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n` +
      `–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${amount} ‚≠ê</b>\n` +
      `ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>${payment.telegram_payment_charge_id}</code>`,
    { parse_mode: "HTML" }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
bot.on("pre_checkout_query", async (ctx) => {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–æ–≤–∞—Ä –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω

  console.log(
    `Pre-checkout query from ${ctx.from?.id} for ${ctx.preCheckoutQuery.total_amount} stars`
  );

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
  await ctx.answerPreCheckoutQuery(true);
});

// // üí∞ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
// bot.command("balance", async (ctx) => {
//   const user = await ensureUser(ctx);

//   if (user) {
//     await ctx.reply(`‚≠ê –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} –∑–≤–µ–∑–¥`);
//   } else {
//     await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞");
//   }
// });

// üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
});

// üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
