// database/onboarding.ts (–Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ users.ts)
import { prisma } from "./client";
import { UserOnboardingStatus } from "@prisma/client";
import { validateReferral, getUserValidatedReferralsCount } from "./referrals";

// ‚≠ê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã
export async function processChannelSubscriptionComplete(userId: string) {
  return prisma.$transaction(async (tx) => {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await tx.user.findUnique({
      where: { id: userId },
    });

    if (!user) {
      throw new Error("User not found");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    if (user.onboardingStatus !== UserOnboardingStatus.GIFT_REVEALED) {
      throw new Error(
        `Cannot complete channels for user with status: ${user.onboardingStatus}`
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ CHANNELS_COMPLETED
    await tx.user.update({
      where: { id: userId },
      data: {
        onboardingStatus: UserOnboardingStatus.CHANNELS_COMPLETED,
      },
    });

    console.log(`‚úÖ User ${userId} completed channel subscriptions`);

    // ‚≠ê –í–ê–õ–ò–î–ò–†–£–ï–ú –†–ï–§–ï–†–ê–õ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω)
    // –≠—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    setTimeout(async () => {
      try {
        const validatedReferral = await validateReferral(userId);
        if (validatedReferral) {
          console.log(`‚úÖ Referral validated for user ${userId}`);

          // ‚≠ê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –†–ï–§–ï–†–ï–†–£
          // –≠—Ç–æ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          await notifyReferrerAboutNewReferral(validatedReferral);
        }
      } catch (error) {
        console.error("Error validating referral:", error);
      }
    }, 100);

    return user;
  });
}

// ‚≠ê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫
export async function canUserClaimOnboardingGift(userId: string) {
  const user = await prisma.user.findUnique({
    where: { id: userId },
  });

  if (!user) {
    return { canClaim: false, reason: "User not found" };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  if (user.onboardingStatus !== UserOnboardingStatus.CHANNELS_COMPLETED) {
    return {
      canClaim: false,
      reason: `Invalid onboarding status: ${user.onboardingStatus}`,
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const validatedReferralsCount = await getUserValidatedReferralsCount(userId);

  if (validatedReferralsCount < 2) {
    return {
      canClaim: false,
      reason: `Not enough referrals: ${validatedReferralsCount}/2`,
      currentReferrals: validatedReferralsCount,
      requiredReferrals: 2,
    };
  }

  return {
    canClaim: true,
    currentReferrals: validatedReferralsCount,
    requiredReferrals: 2,
  };
}

// ‚≠ê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (–∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫)
export async function completeOnboarding(userId: string) {
  return prisma.$transaction(async (tx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫
    const claimCheck = await canUserClaimOnboardingGift(userId);

    if (!claimCheck.canClaim) {
      throw new Error(claimCheck.reason);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ COMPLETED
    const updatedUser = await tx.user.update({
      where: { id: userId },
      data: {
        onboardingStatus: UserOnboardingStatus.COMPLETED,
      },
    });

    console.log(`üéâ User ${userId} completed onboarding!`);

    return updatedUser;
  });
}

// ‚≠ê –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ (–ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é)
export async function skipOnboardingGift(userId: string) {
  return prisma.$transaction(async (tx) => {
    const user = await tx.user.findUnique({
      where: { id: userId },
    });

    if (!user) {
      throw new Error("User not found");
    }

    // –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
    if (user.onboardingStatus !== UserOnboardingStatus.CHANNELS_COMPLETED) {
      throw new Error(`Cannot skip from status: ${user.onboardingStatus}`);
    }

    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å CHANNELS_COMPLETED
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–∑–∂–µ
    console.log(`‚è≠Ô∏è User ${userId} skipped onboarding gift`);

    return user;
  });
}

// ‚≠ê –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ
async function notifyReferrerAboutNewReferral(referral: any) {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
  console.log(
    `üì¢ Should notify referrer ${referral.referrerId} about new referral ${referral.referredId}`
  );

  // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Telegram Bot API
  // –ù–∞–ø—Ä–∏–º–µ—Ä:
  // await bot.api.sendMessage(referral.referrer.telegramId,
  //   `üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! ${referral.referred.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã.`
  // );
}

// ‚≠ê –ü–û–õ–£–ß–ò–¢–¨ –°–¢–ê–¢–£–° –û–ù–ë–û–†–î–ò–ù–ì–ê –° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô
export async function getOnboardingStatusWithDetails(userId: string) {
  const user = await prisma.user.findUnique({
    where: { id: userId },
  });

  if (!user) {
    throw new Error("User not found");
  }

  const validatedReferralsCount = await getUserValidatedReferralsCount(userId);
  const canClaimGift = await canUserClaimOnboardingGift(userId);

  return {
    onboardingStatus: user.onboardingStatus,
    referrals: {
      current: validatedReferralsCount,
      required: 2,
      canProceed: validatedReferralsCount >= 2,
    },
    canClaimGift: canClaimGift.canClaim,
    canSkip: user.onboardingStatus === UserOnboardingStatus.CHANNELS_COMPLETED,
  };
}
