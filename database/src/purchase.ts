// database/src/purchases.ts
import { prisma } from "./client";
import { PurchaseStatus } from "@prisma/client";

export interface CreatePurchaseData {
  buyerId: string;
  giftId: string;
  quantity: number;
  totalPrice: number;
  pricePerItem: number;
  adminNotes?: string;
}

export interface UpdatePurchaseData {
  status?: PurchaseStatus;
  adminNotes?: string;
  sentAt?: Date;
  telegramMessageId?: number;
}

// database/src/purchases.ts
export async function createPurchase(data: CreatePurchaseData) {
  console.log("üîç Starting createPurchase with data:", data);
  console.log("üîç Prisma client:", !!prisma);
  console.log("üîç Available models:", Object.keys(prisma));
  return prisma.$transaction(async (tx) => {
    console.log("üîç Transaction started, tx:", !!tx);
    console.log("üîç tx.purchase:", !!tx.purchase);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    const gift = await tx.gift.findUnique({
      where: { id: data.giftId },
    });

    if (!gift) {
      throw new Error("Gift not found");
    }

    if (gift.quantity < data.quantity) {
      throw new Error("Insufficient gift quantity");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await tx.user.findUnique({
      where: { id: data.buyerId },
    });

    if (!user) {
      throw new Error("User not found");
    }

    if (user.balance < data.totalPrice) {
      throw new Error("Insufficient balance");
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã —Å –±–∞–ª–∞–Ω—Å–∞
    await tx.user.update({
      where: { id: data.buyerId },
      data: {
        balance: {
          decrement: data.totalPrice,
        },
      },
    });

    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤
    await tx.gift.update({
      where: { id: data.giftId },
      data: {
        quantity: {
          decrement: data.quantity,
        },
        soldCount: {
          increment: data.quantity,
        },
      },
    });

    // –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É - –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ó–î–ï–°–¨
    return tx.purchase.create({
      // –ë—ã–ª–æ: prisma.purchase.create
      data: {
        buyerId: data.buyerId,
        giftId: data.giftId,
        quantity: data.quantity,
        totalPrice: data.totalPrice,
        pricePerItem: data.pricePerItem,
        adminNotes: data.adminNotes,
        status: PurchaseStatus.PENDING,
      },
      include: {
        buyer: {
          select: {
            firstName: true,
            username: true,
            telegramId: true,
          },
        },
        gift: {
          select: {
            name: true,
            mediaUrl: true,
            telegramGiftId: true,
          },
        },
      },
    });
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ ID
export async function findPurchaseById(id: number) {
  return prisma.purchase.findUnique({
    where: { id },
    include: {
      buyer: {
        select: {
          firstName: true,
          username: true,
          telegramId: true,
        },
      },
      gift: {
        select: {
          name: true,
          mediaUrl: true,
          telegramGiftId: true,
        },
      },
    },
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
export async function findPurchases(options?: {
  skip?: number;
  take?: number;
  status?: PurchaseStatus;
  buyerId?: string;
  giftId?: string;
  orderBy?: "createdAt" | "updatedAt" | "sentAt";
  orderDir?: "asc" | "desc";
}) {
  const where: any = {};

  if (options?.status) {
    where.status = options.status;
  }

  if (options?.buyerId) {
    where.buyerId = options.buyerId;
  }

  if (options?.giftId) {
    where.giftId = options.giftId;
  }

  const orderBy = options?.orderBy || "createdAt";
  const orderDir = options?.orderDir || "desc";

  return prisma.purchase.findMany({
    where,
    skip: options?.skip,
    take: options?.take,
    orderBy: {
      [orderBy]: orderDir,
    },
    include: {
      buyer: {
        select: {
          firstName: true,
          username: true,
          telegramId: true,
        },
      },
      gift: {
        select: {
          name: true,
          mediaUrl: true,
          telegramGiftId: true,
        },
      },
    },
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
export async function getPurchasesByStatus() {
  const [pending, sent, cancelled] = await Promise.all([
    prisma.purchase.findMany({
      where: { status: PurchaseStatus.PENDING },
      include: {
        buyer: {
          select: {
            firstName: true,
            username: true,
            telegramId: true,
          },
        },
        gift: {
          select: {
            name: true,
            mediaUrl: true,
            telegramGiftId: true,
          },
        },
      },
      orderBy: { createdAt: "asc" },
    }),
    prisma.purchase.findMany({
      where: { status: PurchaseStatus.SENT },
      include: {
        buyer: {
          select: {
            firstName: true,
            username: true,
            telegramId: true,
          },
        },
        gift: {
          select: {
            name: true,
            mediaUrl: true,
            telegramGiftId: true,
          },
        },
      },
      orderBy: { sentAt: "desc" },
    }),
    prisma.purchase.findMany({
      where: { status: PurchaseStatus.CANCELLED },
      include: {
        buyer: {
          select: {
            firstName: true,
            username: true,
            telegramId: true,
          },
        },
        gift: {
          select: {
            name: true,
            mediaUrl: true,
            telegramGiftId: true,
          },
        },
      },
      orderBy: { updatedAt: "desc" },
    }),
  ]);

  return {
    pending,
    history: [...sent, ...cancelled].sort(
      (a, b) =>
        new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
    ),
  };
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É
export async function updatePurchase(id: number, data: UpdatePurchaseData) {
  return prisma.purchase.update({
    where: { id },
    data: {
      ...data,
      updatedAt: new Date(),
    },
    include: {
      buyer: {
        select: {
          firstName: true,
          username: true,
          telegramId: true,
        },
      },
      gift: {
        select: {
          name: true,
          mediaUrl: true,
          telegramGiftId: true,
        },
      },
    },
  });
}

// –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
export async function markPurchaseAsSent(
  id: number,
  telegramMessageId?: number,
  adminNotes?: string
) {
  return updatePurchase(id, {
    status: PurchaseStatus.SENT,
    sentAt: new Date(),
    telegramMessageId,
    adminNotes,
  });
}

// –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤
export async function cancelPurchase(id: number, adminNotes?: string) {
  return prisma.$transaction(async (tx) => {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫—É
    const purchase = await tx.purchase.findUnique({
      where: { id },
      include: { gift: true },
    });

    if (!purchase) {
      throw new Error("Purchase not found");
    }

    if (purchase.status !== PurchaseStatus.PENDING) {
      throw new Error("Can only cancel pending purchases");
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await tx.user.update({
      where: { id: purchase.buyerId },
      data: {
        balance: {
          increment: purchase.totalPrice,
        },
      },
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤
    await tx.gift.update({
      where: { id: purchase.giftId },
      data: {
        quantity: {
          increment: purchase.quantity,
        },
        soldCount: {
          decrement: purchase.quantity,
        },
      },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏
    return tx.purchase.update({
      where: { id },
      data: {
        status: PurchaseStatus.CANCELLED,
        adminNotes,
        updatedAt: new Date(),
      },
      include: {
        buyer: {
          select: {
            firstName: true,
            username: true,
            telegramId: true,
          },
        },
        gift: {
          select: {
            name: true,
            mediaUrl: true,
            telegramGiftId: true,
          },
        },
      },
    });
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserPurchases(userId: string) {
  return prisma.purchase.findMany({
    where: { buyerId: userId },
    include: {
      gift: {
        select: {
          name: true,
          mediaUrl: true,
          telegramGiftId: true,
        },
      },
    },
    orderBy: { createdAt: "desc" },
  });
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫
export async function getPurchaseStats() {
  const [total, pending, sent, cancelled, totalRevenue] = await Promise.all([
    prisma.purchase.count(),
    prisma.purchase.count({
      where: { status: PurchaseStatus.PENDING },
    }),
    prisma.purchase.count({
      where: { status: PurchaseStatus.SENT },
    }),
    prisma.purchase.count({
      where: { status: PurchaseStatus.CANCELLED },
    }),
    prisma.purchase.aggregate({
      where: { status: { in: [PurchaseStatus.SENT] } },
      _sum: {
        totalPrice: true,
      },
    }),
  ]);

  return {
    total,
    pending,
    sent,
    cancelled,
    totalRevenue: totalRevenue._sum.totalPrice || 0,
  };
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
export async function getTopBuyers(limit = 10) {
  return prisma.purchase.groupBy({
    by: ["buyerId"],
    where: {
      status: { in: [PurchaseStatus.SENT] },
    },
    _sum: {
      totalPrice: true,
    },
    _count: {
      id: true,
    },
    orderBy: {
      _sum: {
        totalPrice: "desc",
      },
    },
    take: limit,
  });
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–∞–º –≤ purchases.ts

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ - –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º
export async function getPendingPurchases(options?: {
  cursor?: string; // ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
  limit?: number;
}) {
  const limit = options?.limit || 20;

  const where: any = {
    status: PurchaseStatus.PENDING,
  };

  // Cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏—è (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –¥–ª—è realtime –¥–∞–Ω–Ω—ã—Ö)
  if (options?.cursor) {
    where.id = {
      lt: parseInt(options.cursor, 10),
    };
  }

  const purchases = await prisma.purchase.findMany({
    where,
    take: limit + 1, // +1 —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
    orderBy: { createdAt: "asc" }, // —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
    include: {
      buyer: {
        select: {
          firstName: true,
          username: true,
          telegramId: true,
        },
      },
      gift: {
        select: {
          name: true,
          mediaUrl: true,
          telegramGiftId: true,
        },
      },
    },
  });

  const hasMore = purchases.length > limit;
  const items = hasMore ? purchases.slice(0, -1) : purchases;
  const nextCursor = hasMore ? items[items.length - 1]?.id : null;

  return {
    items,
    hasMore,
    nextCursor,
    total: await prisma.purchase.count({
      where: { status: PurchaseStatus.PENDING },
    }),
  };
}

export async function getHistoryPurchases(options?: {
  cursor?: string;
  limit?: number;
}) {
  const limit = options?.limit || 20;

  const where: any = {
    status: {
      in: [PurchaseStatus.SENT, PurchaseStatus.CANCELLED],
    },
  };

  if (options?.cursor) {
    where.id = {
      lt: parseInt(options.cursor, 10),
    };
  }

  const purchases = await prisma.purchase.findMany({
    where,
    take: limit + 1,
    orderBy: { updatedAt: "desc" }, // –Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É
    include: {
      buyer: {
        select: {
          firstName: true,
          username: true,
          telegramId: true,
        },
      },
      gift: {
        select: {
          name: true,
          mediaUrl: true,
          telegramGiftId: true,
        },
      },
    },
  });

  const hasMore = purchases.length > limit;
  const items = hasMore ? purchases.slice(0, -1) : purchases;
  const nextCursor = hasMore ? items[items.length - 1]?.id : null;

  return {
    items,
    hasMore,
    nextCursor,
    total: await prisma.purchase.count({
      where: {
        status: { in: [PurchaseStatus.SENT, PurchaseStatus.CANCELLED] },
      },
    }),
  };
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª—é–±–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
export async function getPurchasesPaginated(options: {
  status?: PurchaseStatus | PurchaseStatus[];
  cursor?: string;
  limit?: number;
  orderBy?: "createdAt" | "updatedAt" | "sentAt";
  orderDir?: "asc" | "desc";
}) {
  const limit = options.limit || 20;
  const orderBy = options.orderBy || "createdAt";
  const orderDir = options.orderDir || "desc";

  const where: any = {};

  if (options.status) {
    where.status = Array.isArray(options.status)
      ? { in: options.status }
      : options.status;
  }

  if (options.cursor) {
    where.id = {
      [orderDir === "desc" ? "lt" : "gt"]: options.cursor,
    };
  }

  const purchases = await prisma.purchase.findMany({
    where,
    take: limit + 1,
    orderBy: { [orderBy]: orderDir },
    include: {
      buyer: {
        select: {
          firstName: true,
          username: true,
          telegramId: true,
        },
      },
      gift: {
        select: {
          name: true,
          mediaUrl: true,
          telegramGiftId: true,
        },
      },
    },
  });

  const hasMore = purchases.length > limit;
  const items = hasMore ? purchases.slice(0, -1) : purchases;
  const nextCursor = hasMore ? items[items.length - 1]?.id : null;

  return {
    items,
    hasMore,
    nextCursor,
  };
}
