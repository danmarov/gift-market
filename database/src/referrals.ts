// database/referrals.ts
import { prisma } from "./client";

export interface CreateReferralData {
  referrerId: string;
  referredId: string;
  reward?: number;
}

export interface CreateReferralData {
  referrerId: string;
  referredId: string;
  reward?: number;
}

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ë–ï–ó –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
export async function createReferral(data: CreateReferralData) {
  return prisma.referral.create({
    data: {
      referrerId: data.referrerId,
      referredId: data.referredId,
      reward: 0, // üëà –ö–õ–Æ–ß–ï–í–û–ï: 0 = –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞, >0 = –Ω–∞—á–∏—Å–ª–µ–Ω–∞
    },
    include: {
      referrer: true,
      referred: true,
    },
  });
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
export async function processReferralOnboardingReward(
  referredUserId: string,
  referrerReward = 5,
  referredReward = 5
) {
  return prisma.$transaction(async (tx) => {
    // –ò—â–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const referral = await tx.referral.findUnique({
      where: {
        referredId: referredUserId,
      },
      include: {
        referrer: true,
        referred: true,
      },
    });

    if (!referral) {
      console.log(`üîç No referral found for user ${referredUserId}`);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –Ω–∞–≥—Ä–∞–¥–∞ (reward > 0)
    if (referral.reward > 0) {
      console.log(
        `üí∞ Referral reward already processed for user ${referredUserId}`
      );
      return null;
    }

    console.log(
      `üí∞ Processing referral reward: ${referral.referrerId} -> ${referredUserId}`
    );

    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    await tx.user.update({
      where: { id: referral.referrerId },
      data: {
        balance: { increment: referrerReward },
      },
    });

    // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await tx.user.update({
      where: { id: referredUserId },
      data: {
        balance: { increment: referredReward },
      },
    });

    // –ü–æ–º–µ—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è—è reward
    const updatedReferral = await tx.referral.update({
      where: { id: referral.id },
      data: {
        reward: referrerReward, // > 0 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞
      },
      include: {
        referrer: true,
        referred: true,
      },
    });

    return updatedReferral;
  });
}

// –ù–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function findReferralByReferredId(referredId: string) {
  return prisma.referral.findUnique({
    where: { referredId },
    include: {
      referrer: true,
      referred: true,
    },
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserReferrals(userId: string) {
  return prisma.referral.findMany({
    where: { referrerId: userId },
    include: {
      referred: {
        select: {
          id: true,
          firstName: true,
          username: true,
          createdAt: true,
        },
      },
    },
    orderBy: { createdAt: "desc" },
  });
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserReferralStats(userId: string) {
  const [totalReferrals, totalReward] = await Promise.all([
    prisma.referral.count({
      where: { referrerId: userId },
    }),
    prisma.referral.aggregate({
      where: { referrerId: userId },
      _sum: { reward: true },
    }),
  ]);

  return {
    totalReferrals,
    totalReward: totalReward._sum.reward || 0,
  };
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ)
export async function canUserBeReferred(userId: string) {
  const existingReferral = await prisma.referral.findUnique({
    where: { referredId: userId },
  });

  return !existingReferral;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
export async function getTopReferrers(limit = 10) {
  return prisma.user.findMany({
    include: {
      _count: {
        select: {
          referralsGiven: true,
        },
      },
    },
    orderBy: {
      referralsGiven: {
        _count: "desc",
      },
    },
    take: limit,
    where: {
      referralsGiven: {
        some: {},
      },
    },
  });
}
