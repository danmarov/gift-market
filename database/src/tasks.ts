// database/src/tasks.ts
import { prisma } from "./client";
import { TaskType, TaskDuration, UserTaskStatus } from "@prisma/client";

export interface CreateTaskData {
  type: TaskType;
  duration: TaskDuration;
  title: string;
  description?: string;
  reward: number;
  icon: string;
  metadata?: any;
  maxCompletions?: number;
  startsAt?: Date;
}

export interface UpdateTaskData {
  type?: any;
  title?: string;
  description?: string;
  reward?: number;
  icon?: string;
  metadata?: any;
  isActive?: boolean;
  isVisible?: boolean;
  maxCompletions?: number;
  startsAt?: Date;
  duration?: TaskDuration;
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ —Ç–∞—Ä–∏—Ñ—É
function calculateExpiresAt(duration: TaskDuration, startsAt: Date): Date {
  const start = new Date(startsAt);

  switch (duration) {
    case "ONE_DAY":
      return new Date(start.getTime() + 24 * 60 * 60 * 1000);
    case "ONE_WEEK":
      return new Date(start.getTime() + 7 * 24 * 60 * 60 * 1000);
    case "ONE_MONTH":
      return new Date(start.getTime() + 30 * 24 * 60 * 60 * 1000);
    default:
      throw new Error(`Unknown duration: ${duration}`);
  }
}

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
export async function createTask(data: CreateTaskData) {
  const startsAt = data.startsAt || new Date();
  const expiresAt = calculateExpiresAt(data.duration, startsAt);

  return prisma.task.create({
    data: {
      type: data.type,
      duration: data.duration,
      title: data.title,
      description: data.description,
      reward: data.reward,
      icon: data.icon,
      metadata: data.metadata,
      maxCompletions: data.maxCompletions,
      startsAt,
      expiresAt,
    },
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID
export async function findTaskById(id: string) {
  return prisma.task.findUnique({
    where: { id },
    include: {
      userTasks: true,
    },
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤–∏–¥–∏–º—ã–µ –∑–∞–¥–∞–Ω–∏—è
export async function getActiveTasks() {
  const now = new Date();

  return prisma.task.findMany({
    where: {
      isActive: true,
      isVisible: true,
      startsAt: { lte: now },
      expiresAt: { gt: now },
    },
    orderBy: [
      { duration: "asc" }, // —Å–Ω–∞—á–∞–ª–∞ ONE_DAY, –ø–æ—Ç–æ–º ONE_WEEK, –ø–æ—Ç–æ–º ONE_MONTH
      { createdAt: "desc" },
    ],
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏
export async function getTasksForUser(userId: string) {
  const tasks = await getActiveTasks();

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ UserTask –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userTasks = await prisma.userTask.findMany({
    where: { userId },
  });

  // –ú–µ—Ä–∂–∏–º –¥–∞–Ω–Ω—ã–µ
  return tasks.map((task) => {
    const userTask = userTasks.find((ut) => ut.taskId === task.id);

    return {
      ...task,
      userTaskStatus: userTask?.status || UserTaskStatus.AVAILABLE,
      startedAt: userTask?.startedAt,
      completedAt: userTask?.completedAt,
      claimedAt: userTask?.claimedAt,
    };
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
export async function getCategorizedTasksForUser(userId: string) {
  const tasks = await getTasksForUser(userId);

  return {
    daily: tasks.filter((task) => task.duration === "ONE_DAY"),
    oneTime: tasks.filter((task) =>
      ["ONE_WEEK", "ONE_MONTH"].includes(task.duration)
    ),
  };
}

export async function updateTask(id: string, data: UpdateTaskData) {
  const task = await prisma.task.findUnique({ where: { id } });
  if (!task) {
    throw new Error("Task not found");
  }

  const updates: any = {
    ...data,
    updatedAt: new Date(),
  };

  const newStartsAt = data.startsAt ?? task.startsAt;
  const newDuration = data.duration ?? task.duration;

  if (data.startsAt || data.duration) {
    updates.expiresAt = calculateExpiresAt(newDuration, newStartsAt);
  }

  return prisma.task.update({
    where: { id },
    data: updates,
  });
}

// –°–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ (soft delete)
export async function hideTask(id: string) {
  return updateTask(id, { isVisible: false });
}

// –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
export async function deactivateTask(id: string) {
  return updateTask(id, { isActive: false });
}

// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏)
export async function deleteTask(id: string) {
  return prisma.task.delete({
    where: { id },
  });
}

export async function startTask(userId: string, taskId: string) {
  return prisma.$transaction(async (tx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ
    const task = await tx.task.findUnique({
      where: { id: taskId },
    });
    if (!task) {
      throw new Error("Task not found");
    }
    if (!task.isActive || !task.isVisible) {
      throw new Error("Task is not available");
    }
    const now = new Date();
    if (task.expiresAt <= now) {
      throw new Error("Task has expired");
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUserTask = await tx.userTask.findUnique({
      where: { userId_taskId: { userId, taskId } },
    });
    // –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å AVAILABLE –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (
      existingUserTask &&
      existingUserTask.status !== UserTaskStatus.AVAILABLE
    ) {
      throw new Error("Task already started");
    }
    return tx.userTask.upsert({
      where: { userId_taskId: { userId, taskId } },
      create: {
        userId,
        taskId,
        status: UserTaskStatus.IN_PROGRESS,
        startedAt: new Date(),
      },
      update: {
        status: UserTaskStatus.IN_PROGRESS,
        startedAt: new Date(),
      },
    });
  });
}

export async function startAndCompleteTask(userId: string, taskId: string) {
  return prisma.$transaction(async (tx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ
    const task = await tx.task.findUnique({
      where: { id: taskId },
    });
    if (!task) {
      throw new Error("Task not found");
    }
    if (!task.isActive || !task.isVisible) {
      throw new Error("Task is not available");
    }

    const now = new Date();
    if (task.expiresAt <= now) {
      throw new Error("Task has expired");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUserTask = await tx.userTask.findUnique({
      where: { userId_taskId: { userId, taskId } },
    });

    // –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å AVAILABLE –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (
      existingUserTask &&
      existingUserTask.status !== UserTaskStatus.AVAILABLE
    ) {
      throw new Error("Task already started or completed");
    }

    // üî• –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å—Ç–∞—Ç—É—Å–µ COMPLETED
    const userTask = await tx.userTask.upsert({
      where: { userId_taskId: { userId, taskId } },
      create: {
        userId,
        taskId,
        status: UserTaskStatus.COMPLETED, // üî• –°—Ä–∞–∑—É COMPLETED
        startedAt: now,
        completedAt: now, // üî• –°—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º
      },
      update: {
        status: UserTaskStatus.COMPLETED,
        startedAt: now,
        completedAt: now,
      },
    });

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    await tx.task.update({
      where: { id: taskId },
      data: { completedCount: { increment: 1 } },
    });

    return userTask;
  });
}

// –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
export async function completeTask(userId: string, taskId: string) {
  return prisma.$transaction(async (tx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const task = await tx.task.findUnique({
      where: { id: taskId },
    });
    if (!task) {
      throw new Error("Task not found");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userTask = await tx.userTask.findUnique({
      where: { userId_taskId: { userId, taskId } },
    });
    if (!userTask) {
      throw new Error("Task was not started");
    }

    // üî• –î–ª—è FREE_BONUS —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑ –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–æ–º–µ CLAIMED
    if (task.type === "FREE_BONUS") {
      if (userTask.status === UserTaskStatus.CLAIMED) {
        throw new Error("Task already claimed");
      }
      // –ú–æ–∂–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–∑ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á - —Ç–æ–ª—å–∫–æ –∏–∑ IN_PROGRESS
      if (userTask.status !== UserTaskStatus.IN_PROGRESS) {
        throw new Error(`Cannot complete task with status: ${userTask.status}`);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const updatedUserTask = await tx.userTask.update({
      where: { userId_taskId: { userId, taskId } },
      data: {
        status: UserTaskStatus.COMPLETED,
        completedAt: new Date(),
      },
    });

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–∏
    if (userTask.status !== UserTaskStatus.COMPLETED) {
      await tx.task.update({
        where: { id: taskId },
        data: { completedCount: { increment: 1 } },
      });
    }

    return updatedUserTask;
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
export async function claimTaskReward(userId: string, taskId: string) {
  return prisma.$transaction(async (tx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const task = await tx.task.findUnique({
      where: { id: taskId },
    });
    if (!task) {
      throw new Error("Task not found");
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userTask = await tx.userTask.findUnique({
      where: { userId_taskId: { userId, taskId } },
    });
    if (!userTask) {
      throw new Error("Task was not started");
    }
    if (userTask.status !== UserTaskStatus.COMPLETED) {
      throw new Error(`Cannot claim reward. Task status: ${userTask.status}`);
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –ª–∏ —É–∂–µ –Ω–∞–≥—Ä–∞–¥–∞
    if (userTask.claimedAt) {
      throw new Error("Reward already claimed");
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const updatedUserTask = await tx.userTask.update({
      where: { userId_taskId: { userId, taskId } },
      data: {
        status: UserTaskStatus.CLAIMED,
        claimedAt: new Date(),
      },
    });
    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    await tx.user.update({
      where: { id: userId },
      data: {
        balance: { increment: task.reward },
      },
    });
    return updatedUserTask;
  });
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞–Ω–∏–π
export async function getTaskStats() {
  const [total, active, expired, completions] = await Promise.all([
    prisma.task.count(),
    prisma.task.count({
      where: {
        isActive: true,
        isVisible: true,
        expiresAt: { gt: new Date() },
      },
    }),
    prisma.task.count({
      where: {
        expiresAt: { lte: new Date() },
      },
    }),
    prisma.task.aggregate({
      _sum: {
        completedCount: true,
      },
    }),
  ]);

  return {
    total,
    active,
    expired,
    totalCompletions: completions._sum.completedCount || 0,
  };
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∑–∞–¥–∞–Ω–∏–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è–º
export async function getTopTasksByCompletions(limit = 10) {
  return prisma.task.findMany({
    where: {
      completedCount: { gt: 0 },
    },
    orderBy: {
      completedCount: "desc",
    },
    take: limit,
  });
}

export async function getAllTasksForAdmin(userId: string) {
  const allTasks = await prisma.task.findMany({
    orderBy: [{ duration: "asc" }, { createdAt: "desc" }],
  });

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ UserTask –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userTasks = await prisma.userTask.findMany({
    where: { userId },
  });

  // –ú–µ—Ä–∂–∏–º –¥–∞–Ω–Ω—ã–µ
  return allTasks.map((task) => {
    const userTask = userTasks.find((ut) => ut.taskId === task.id);

    return {
      ...task,
      userTaskStatus: userTask?.status || UserTaskStatus.AVAILABLE,
      startedAt: userTask?.startedAt,
      completedAt: userTask?.completedAt,
      claimedAt: userTask?.claimedAt,
    };
  });
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∞–¥–º–∏–Ω–∞
export async function getAllCategorizedTasksForAdmin(userId: string) {
  const tasks = await getAllTasksForAdmin(userId);

  return {
    daily: tasks.filter((task) => task.duration === "ONE_DAY"),
    oneTime: tasks.filter((task) =>
      ["ONE_WEEK", "ONE_MONTH"].includes(task.duration)
    ),
  };
}
