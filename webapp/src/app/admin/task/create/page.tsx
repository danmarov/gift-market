// app/admin/tasks/create/page.tsx
"use client";
import TelegramBackButton from "@/components/common/telegram-back-button";
import CreateTaskForm, {
  CreateTaskFormRef,
} from "@/components/features/admin/task/create/create-task-form";
import MainLayout from "@/components/layout/main-layout";
import ActionButton from "@/components/ui/action-button";
import showToast from "@/components/ui/custom-toast";
import { createTaskAction } from "@/lib/actions/admin/create-task";
import { hapticFeedback } from "@/lib/haptic-feedback";
import { CreateTaskFormData } from "@/lib/types/task";
import { useRouter } from "next/navigation";
import { useRef, useState, useTransition } from "react";

export default function CreateTaskPage() {
  const formRef = useRef<CreateTaskFormRef>(null);
  const [isFormValid, setIsFormValid] = useState(false);
  const [isPending, startTransition] = useTransition();
  const router = useRouter();
  const handleSubmit = async (data: CreateTaskFormData) => {
    startTransition(async () => {
      try {
        const result = await createTaskAction(data);
        if (result.success) {
          console.log("üéâ [CLIENT] Task created:", result.data);
          showToast.success(result.data?.message || "–ó–∞–¥–∞–Ω–∏–µ —É–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ");
          if (formRef.current) {
            formRef.current.resetForm();
          }
          hapticFeedback("success");
          router.push("/tasks");
        } else {
          console.error("‚ùå [CLIENT] Error:", result.error);
          showToast.error(result.error || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
          hapticFeedback("error");
          if (result.fieldErrors) {
            console.log("üî• [CLIENT] Field errors:", result.fieldErrors);
          }
        }
      } catch (error) {
        console.error("üí• [CLIENT] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:", error);
        showToast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        hapticFeedback("error");
      }
    });
  };

  const handleCreateTask = () => {
    console.log("üñ±Ô∏è [CLIENT] –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∞");
    if (formRef.current) {
      formRef.current.submitForm();
    }
  };

  return (
    <MainLayout
      bottomBar={
        <ActionButton
          onClick={handleCreateTask}
          disabled={!isFormValid}
          isLoading={isPending}
        >
          {isPending ? "–°–æ–∑–¥–∞–µ–º..." : "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"}
        </ActionButton>
      }
    >
      <TelegramBackButton />
      <h1 className="text-white text-2xl font-sans mb-4">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</h1>
      <p className="text-white/70 text-sm mb-6">
        –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      </p>

      <CreateTaskForm
        ref={formRef}
        onSubmit={handleSubmit}
        onValidationChange={setIsFormValid}
      />
    </MainLayout>
  );
}
