"use client";
import Button from "@/components/ui/button";
import Input from "@/components/ui/input";
import Textarea from "@/components/ui/textarea";
import React, { forwardRef, useEffect, useImperativeHandle } from "react";
import { useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import FileUpload from "@/components/ui/file-upload";

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–∑–æ–≤ –¥–µ–º–æ-—Ä—É–ª–µ—Ç–∫–∏ (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
const createDemoPrizeSchema = z.object({
  name: z.string().min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
  description: z.string().optional(),
  mediaFile: z.instanceof(File).optional().or(z.null()),
});

export type CreateDemoPrizeFormData = z.infer<typeof createDemoPrizeSchema>;

export interface CreateDemoPrizeFormRef {
  submitForm: () => void;
  resetForm: () => void;
  isValid: boolean;
}

interface InitialData {
  name?: string;
  description?: string;
  mediaUrl?: string;
}

interface CreateDemoPrizeFormProps {
  onSubmit: (data: CreateDemoPrizeFormData) => void;
  onValidationChange?: (isValid: boolean) => void;
  initialData?: InitialData;
}

const CreateDemoPrizeForm = forwardRef<
  CreateDemoPrizeFormRef,
  CreateDemoPrizeFormProps
>(({ onSubmit, onValidationChange, initialData }, ref) => {
  const {
    control,
    handleSubmit,
    formState: { errors, isValid },
    reset,
    watch,
  } = useForm<CreateDemoPrizeFormData>({
    resolver: zodResolver(createDemoPrizeSchema),
    mode: "onChange",
    defaultValues: {
      name: initialData?.name || "",
      description: initialData?.description || "",
      mediaFile: null,
    },
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ initialData
  useEffect(() => {
    if (initialData) {
      reset({
        name: initialData.name || "",
        description: initialData.description || "",
        mediaFile: null,
      });
    }
  }, [initialData, reset]);

  useImperativeHandle(ref, () => ({
    submitForm: () => {
      handleSubmit(onSubmit)();
    },
    resetForm: () => {
      reset();
    },
    isValid,
  }));

  useEffect(() => {
    if (onValidationChange) {
      onValidationChange(isValid);
    }
  }, [isValid, onValidationChange]);

  const handleFormSubmit = (data: CreateDemoPrizeFormData) => {
    console.log("üìù [FORM] –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", {
      name: data.name,
      description: data.description,
      mediaFile: data.mediaFile
        ? {
            name: data.mediaFile.name,
            size: data.mediaFile.size,
            type: data.mediaFile.type,
          }
        : null,
    });
    onSubmit(data);
  };

  return (
    <div>
      <form
        id="create-demo-prize-form"
        onSubmit={handleSubmit(handleFormSubmit)}
      >
        <div className="flex flex-col gap-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="bg-white/5 rounded-2xl">
            <div className="flex items-center gap-2 mb-4">
              <span className="text-lg">üìù</span>
              <h3 className="text-white font-semibold text-lg">
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–∑–µ
              </h3>
            </div>

            <div className="flex flex-col gap-4">
              <Controller
                name="name"
                control={control}
                render={({ field }) => (
                  <Input
                    label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ *"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–µ–¥–≤–µ–¥—å"
                    error={errors.name?.message}
                    {...field}
                  />
                )}
              />

              <Controller
                name="description"
                control={control}
                render={({ field }) => (
                  <Textarea
                    label="–û–ø–∏—Å–∞–Ω–∏–µ"
                    placeholder="–ú–∏–ª—ã–π –º–µ–¥–≤–µ–¥—å –≤ –ø–æ–¥–∞—Ä–æ–∫! –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è..."
                    error={errors.description?.message}
                    {...field}
                  />
                )}
              />
            </div>
          </div>

          {/* –ú–µ–¥–∏–∞—Ñ–∞–π–ª */}
          <div className="bg-white/5 rounded-2xl">
            <div className="flex items-center gap-2 mb-4">
              <span className="text-lg">üé¨</span>
              <h3 className="text-white font-semibold text-lg">
                –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–∑–∞
              </h3>
            </div>

            <div className="flex flex-col gap-4">
              <Controller
                name="mediaFile"
                control={control}
                render={({ field: { onChange, value } }) => (
                  <FileUpload
                    label="–§–∞–π–ª –∞–Ω–∏–º–∞—Ü–∏–∏"
                    accept=".tgs"
                    placeholder={
                      initialData?.mediaUrl
                        ? `–¢–µ–∫—É—â–∏–π: ${initialData.mediaUrl}`
                        : "–í—ã–±–µ—Ä–∏—Ç–µ TGS —Ñ–∞–π–ª"
                    }
                    error={errors.mediaFile?.message}
                    onChange={onChange}
                    value={value || null} // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–∫–∏
                    description="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç .tgs (Telegram —Å—Ç–∏–∫–µ—Ä). –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Ñ–∞–π–ª."
                  />
                )}
              />
            </div>
          </div>

          {/* –°–∫—Ä—ã—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          <button type="submit" style={{ display: "none" }} />
        </div>
      </form>
    </div>
  );
});

CreateDemoPrizeForm.displayName = "CreateDemoPrizeForm";

export default CreateDemoPrizeForm;
