"use client";
import Button from "@/components/ui/button";
import showToast from "@/components/ui/custom-toast";
import TGSPlayer from "@/components/ui/tgs-wrapper";
import { deleteDemoPrize } from "@/lib/actions/admin/delete-demo-prize";
import { getDemoPrizes, DemoPrize } from "@/lib/actions/admin/get-demo-prizes";
import { Trash, Plus, Send } from "lucide-react";
import Link from "next/link";
import { useState, useTransition, memo } from "react";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import Input from "@/components/ui/input";
import { useAuth } from "../../auth/hooks/use-auth";
import { hapticFeedback } from "@/lib/haptic-feedback";
import { sendDemoLink } from "@/lib/actions/admin/send-demo-link";
import { cn } from "@/lib/utils";

interface DemoPrizesClientProps {
  initialPrizes: DemoPrize[];
}

// –í—ã–Ω–æ—Å–∏–º PrizeCard –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º
const PrizeCard = memo(
  ({
    prize,
    isDeleting,
    onDelete,
  }: {
    prize: DemoPrize;
    isDeleting: boolean;
    onDelete: (prizeId: number, prizeName: string) => void;
  }) => {
    const [userId, setUserId] = useState("");
    const [isSending, startTransition] = useTransition(); // –î–æ–±–∞–≤–ª—è–µ–º useTransition

    const handleSendDemo = () => {
      if (!userId.trim()) {
        showToast.error("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        return;
      }

      console.log(
        `üì§ [SEND DEMO] User ID: "${userId}", Prize ID: ${prize.id}, Prize Name: "${prize.name}"`
      );

      startTransition(async () => {
        try {
          const result = await sendDemoLink(userId, prize.id);

          if (result.success) {
            showToast.success(result.message);
            setUserId(""); // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
          } else {
            showToast.error(result.error);
          }
        } catch (error) {
          console.error("üí• [CLIENT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–º–æ-—Å—Å—ã–ª–∫–∏:", error);
          showToast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
        }
      });
    };

    const handleSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      handleSendDemo();
    };
    return (
      <div
        className="rounded-2xl p-4"
        style={{
          background: "rgba(255, 255,255, 0.1)",
          border: "1px solid rgba(255,255,255,0.1)",
        }}
      >
        <div className="flex items-start justify-between gap-4 relative">
          <div className="flex-1 min-w-0">
            <h3 className="text-white font-semibold text-lg mt-3 truncate">
              {prize.name}
            </h3>
            <p
              className="text-sm mt-3"
              style={{
                color: "rgba(255, 255,255, 0.6)",
              }}
            >
              {prize.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}
            </p>
            <div
              className="flex items-center gap-4 text-xs mt-3"
              style={{
                color: "rgba(255, 255,255, 0.8)",
              }}
            >
              <TGSPlayer
                src={prize.mediaUrl}
                playOnClick
                style={{
                  width: "100px",
                  height: "100px",
                }}
              />
              <div className="flex flex-col gap-1">
                <span>ID: {prize.id}</span>
                <span>
                  –°–æ–∑–¥–∞–Ω: {new Date(prize.createdAt).toLocaleDateString()}
                </span>
              </div>
            </div>
          </div>

          <div className="flex items-center gap-2 shrink-0 absolute right-0">
            <Button
              variant="secondary"
              onClick={() => onDelete(prize.id, prize.name)}
              disabled={isDeleting}
              style={{
                padding: "9px 10px",
                opacity: isDeleting ? 0.5 : 1,
                cursor: isDeleting ? "not-allowed" : "pointer",
              }}
            >
              <Trash size={20} />
            </Button>
          </div>
        </div>

        <form className="mt-3" onSubmit={handleSubmit}>
          <Input
            value={userId}
            onChange={(e) => setUserId(e.target.value)}
            placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            disabled={isSending}
            className={cn(isSending ? "opacity-60" : "opacity-100")}
            suffix={
              <button
                type="submit"
                disabled={isSending}
                className={cn(isSending ? "opacity-60" : "opacity-100")}
              >
                <Send
                  className="cursor-pointer hover:text-blue-400 transition-colors"
                  onClick={handleSendDemo}
                />
              </button>
            }
          />
        </form>
      </div>
    );
  }
);

PrizeCard.displayName = "PrizeCard";

export default function DemoPrizesClient({
  initialPrizes,
}: DemoPrizesClientProps) {
  const [deletingId, setDeletingId] = useState<number | null>(null);
  const [isPending, startTransition] = useTransition();
  const queryClient = useQueryClient();
  const [isSendingRandom, startRandomTransition] = useTransition();
  const [randomUserId, setRandomUserId] = useState("");

  const { user } = useAuth();

  // React Query –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const { data: prizes = initialPrizes } = useQuery({
    queryKey: ["demo-prizes"],
    queryFn: async () => {
      const result = await getDemoPrizes();
      if (!result.success) {
        throw new Error(result.error);
      }
      return result.data;
    },
    initialData: initialPrizes,
    staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥
  });

  const handleDelete = (prizeId: number, prizeName: string) => {
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–∑ "${prizeName}"?`)) {
      return;
    }

    console.log(`üóëÔ∏è [CLIENT] –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞: ${prizeName} (ID: ${prizeId})`);

    setDeletingId(prizeId);

    startTransition(async () => {
      try {
        // –í—ã–∑—ã–≤–∞–µ–º server action
        const result = await deleteDemoPrize(prizeId);

        if (result.success) {
          console.log(`‚úÖ [CLIENT] –ü—Ä–∏–∑ "${prizeName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);

          // –û–±–Ω–æ–≤–ª—è–µ–º React Query –∫—ç—à
          queryClient.invalidateQueries({ queryKey: ["demo-prizes"] });

          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        } else {
          console.error("‚ùå [CLIENT] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:", result.error);
          showToast.error(result.error);
        }
      } catch (error) {
        console.error("üí• [CLIENT] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
        showToast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
      } finally {
        setDeletingId(null);
      }
    });
  };
  const handleSendRandomDemo = () => {
    if (!randomUserId.trim()) {
      showToast.error("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    console.log(`üé≤ [SEND RANDOM DEMO] User ID: "${randomUserId}"`);

    startRandomTransition(async () => {
      try {
        const result = await sendDemoLink(randomUserId, "random");

        if (result.success) {
          showToast.success(result.message);
          setRandomUserId(""); // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        } else {
          showToast.error(result.error);
        }
      } catch (error) {
        console.error(
          "üí• [CLIENT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–π –¥–µ–º–æ-—Å—Å—ã–ª–∫–∏:",
          error
        );
        showToast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
      }
    });
  };

  const handleRandomSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    handleSendRandomDemo();
  };
  if (prizes.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="text-6xl mb-4">üéÅ</div>
        <h3 className="text-white text-lg font-semibold mb-2">
          –ü—Ä–∏–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç
        </h3>
        <p className="text-white/60 text-sm mb-6">
          –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑ –¥–ª—è –¥–µ–º–æ-—Ä—É–ª–µ—Ç–∫–∏
        </p>
        <Link href="/admin/demo/create">
          <Button variant="primary">
            <Plus size={20} className="mr-2" />
            –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑
          </Button>
        </Link>
      </div>
    );
  }

  return (
    <div className="flex flex-col gap-3">
      {user?.telegramId && (
        <h2
          className="text-white text-lg font-sans mb-2 cursor-pointer"
          onClick={() => {
            hapticFeedback("success");
            navigator.clipboard.writeText(user.telegramId);
          }}
        >
          –í–∞—à ID: {user.telegramId}
        </h2>
      )}
      <p className="text-white text-lg font-sans">
        üé≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
      </p>

      <form className="mb-3" onSubmit={handleRandomSubmit}>
        <Input
          value={randomUserId}
          onChange={(e) => setRandomUserId(e.target.value)}
          placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"
          disabled={isSendingRandom}
          className={cn(isSendingRandom ? "opacity-60" : "opacity-100")}
          suffix={
            <button
              type="submit"
              disabled={isSendingRandom}
              className={cn(isSendingRandom ? "opacity-60" : "opacity-100")}
            >
              <Send
                className={`cursor-pointer transition-colors ${
                  isSendingRandom ? "text-gray-400" : "hover:text-blue-400"
                }`}
              />
            </button>
          }
        />
      </form>
      {prizes.map((prize) => (
        <PrizeCard
          key={prize.id}
          prize={prize}
          isDeleting={deletingId === prize.id}
          onDelete={handleDelete}
        />
      ))}
    </div>
  );
}
