"use client";
import Input from "@/components/ui/input";
import Select from "@/components/ui/select";
import React, { forwardRef, useEffect, useImperativeHandle } from "react";
import { useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { EditTaskFormData, editTaskSchema } from "@/lib/types/task";
import { TaskWithUserStatus } from "@/lib/types/task";

export interface EditTaskFormRef {
  submitForm: () => void;
  resetForm: () => void;
}

interface EditTaskFormProps {
  task: TaskWithUserStatus;
  onSubmit: (data: EditTaskFormData) => void;
  onValidationChange?: (isValid: boolean) => void;
}

const EditTaskForm = forwardRef<EditTaskFormRef, EditTaskFormProps>(
  ({ task, onSubmit, onValidationChange }, ref) => {
    const typeOptions = [
      { value: "TELEGRAM_SUBSCRIPTION", label: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª" },
      { value: "DAILY_BONUS", label: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", disabled: true },
      {
        value: "TIKTOK_COMMENT",
        label: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ Tiktok",
        disabled: true,
      },
    ];

    const durationOptions = [
      { value: "ONE_DAY", label: "1 –¥–µ–Ω—å (–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ)" },
      { value: "ONE_WEEK", label: "7 –¥–Ω–µ–π (–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ)" },
      { value: "ONE_MONTH", label: "30 –¥–Ω–µ–π (–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ)" },
    ];

    const iconOptions = [
      { value: "telegram", label: "üì± Telegram" },
      { value: "youtube", label: "üì∫ YouTube" },
      { value: "instagram", label: "üì∑ Instagram" },
      { value: "twitter", label: "üê¶ Twitter" },
      { value: "tiktok", label: "üéµ TikTok" },
    ];

    const {
      control,
      handleSubmit,
      formState: { errors, isValid },
      reset,
      watch,
    } = useForm<EditTaskFormData>({
      resolver: zodResolver(editTaskSchema),
      mode: "onChange",
      defaultValues: {
        type: task.type || "TELEGRAM_SUBSCRIPTION",
        duration: task.duration || "ONE_DAY",
        title: task.title || "",
        description: task.description || "",
        reward: task.reward || 10,
        icon: task.icon || "telegram",
        channel_url: task.metadata?.channelUrl || "",
        chat_id: task.metadata?.chatId || "",
        starts_at: task.startsAt ? new Date(task.startsAt) : undefined,
        max_completions: task.maxCompletions || undefined,
        is_active: task.isActive ?? true,
        is_visible: task.isVisible ?? true,
      },
    });

    const taskType = watch("type");

    useImperativeHandle(ref, () => ({
      submitForm: () => {
        handleSubmit(onSubmit)();
      },
      resetForm: () => {
        reset();
      },
    }));

    useEffect(() => {
      if (onValidationChange) {
        onValidationChange(isValid);
      }
    }, [isValid, onValidationChange]);

    return (
      <div>
        <form id="edit-task-form" onSubmit={handleSubmit(onSubmit)}>
          <div className="flex flex-col gap-6">
            {/* –¢–∏–ø –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å */}
            <div className="bg-white/5 rounded-2xl">
              <div className="flex items-center gap-2 mb-4">
                <span className="text-lg">‚öôÔ∏è</span>
                <h3 className="text-white font-semibold text-lg">
                  –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è
                </h3>
              </div>

              <div className="grid grid-cols-1 gap-4">
                <Controller
                  name="type"
                  control={control}
                  render={({ field: { onChange, value } }) => (
                    <Select
                      options={typeOptions}
                      label="–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è *"
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø"
                      error={errors.type?.message}
                      onChange={onChange}
                      value={value}
                    />
                  )}
                />

                <Controller
                  name="duration"
                  control={control}
                  render={({ field: { onChange, value } }) => (
                    <Select
                      options={durationOptions}
                      label="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å *"
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫"
                      error={errors.duration?.message}
                      onChange={onChange}
                      value={value}
                    />
                  )}
                />
              </div>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="bg-white/5 rounded-2xl">
              <div className="flex items-center gap-2 mb-4">
                <span className="text-lg">üìù</span>
                <h3 className="text-white font-semibold text-lg">
                  –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </h3>
              </div>

              <div className="flex flex-col gap-4">
                <Controller
                  name="title"
                  control={control}
                  render={({ field }) => (
                    <Input
                      label="–ù–∞–∑–≤–∞–Ω–∏–µ *"
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª"
                      error={errors.title?.message}
                      {...field}
                    />
                  )}
                />

                <Controller
                  name="description"
                  control={control}
                  render={({ field }) => (
                    <Input
                      label="–û–ø–∏—Å–∞–Ω–∏–µ *"
                      placeholder="+10 –∑–≤—ë–∑–¥"
                      error={errors.description?.message}
                      {...field}
                    />
                  )}
                />

                <div className="grid grid-cols-2 gap-4">
                  <Controller
                    name="reward"
                    control={control}
                    render={({ field: { onChange, value, ...field } }) => (
                      <Input
                        label="–ù–∞–≥—Ä–∞–¥–∞ (–∑–≤—ë–∑–¥) *"
                        placeholder="10"
                        type="number"
                        error={errors.reward?.message}
                        {...field}
                        value={value?.toString() || ""}
                        onChange={(e) => onChange(Number(e.target.value))}
                      />
                    )}
                  />

                  <Controller
                    name="icon"
                    control={control}
                    render={({ field: { onChange, value } }) => (
                      <Select
                        options={iconOptions}
                        label="–ò–∫–æ–Ω–∫–∞ *"
                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É"
                        error={errors.icon?.message}
                        onChange={onChange}
                        value={value}
                      />
                    )}
                  />
                </div>
              </div>
            </div>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telegram –ø–æ–¥–ø–∏—Å–∫–∏ */}
            {taskType === "TELEGRAM_SUBSCRIPTION" && (
              <div className="bg-white/5 rounded-2xl">
                <div className="flex items-center gap-2 mb-4">
                  <span className="text-lg">üì±</span>
                  <h3 className="text-white font-semibold text-lg">
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
                  </h3>
                </div>

                <div className="flex flex-col gap-4">
                  <Controller
                    name="channel_url"
                    control={control}
                    render={({ field }) => (
                      <Input
                        label="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª *"
                        placeholder="https://t.me/yourchannel"
                        error={errors.channel_url?.message}
                        {...field}
                      />
                    )}
                  />

                  <Controller
                    name="chat_id"
                    control={control}
                    render={({ field }) => (
                      <Input
                        label="Chat ID –∫–∞–Ω–∞–ª–∞ *"
                        placeholder="-1001234567890"
                        error={errors.chat_id?.message}
                        {...field}
                      />
                    )}
                  />
                </div>
              </div>
            )}

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <div className="bg-white/5 rounded-2xl">
              <div className="flex items-center gap-2 mb-4">
                <span className="text-lg">üéØ</span>
                <h3 className="text-white font-semibold text-lg">
                  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                </h3>
              </div>

              <Controller
                name="max_completions"
                control={control}
                render={({ field: { onChange, value, ...field } }) => (
                  <Input
                    label="–õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π"
                    placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞"
                    type="number"
                    error={errors.max_completions?.message}
                    {...field}
                    value={value?.toString() || ""}
                    onChange={(e) =>
                      onChange(
                        e.target.value ? Number(e.target.value) : undefined
                      )
                    }
                  />
                )}
              />
            </div>
            {/* –°—Ç–∞—Ç—É—Å –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å */}
            <div className="bg-white/5 rounded-2xl">
              <div className="flex items-center gap-2 mb-4">
                <span className="text-lg">üëÅÔ∏è</span>
                <h3 className="text-white font-semibold text-lg">
                  –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
                </h3>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <Controller
                  name="is_active"
                  control={control}
                  render={({ field: { onChange, value } }) => (
                    <Select
                      options={[
                        { value: "true", label: "–ê–∫—Ç–∏–≤–Ω–æ" },
                        { value: "false", label: "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ" },
                      ]}
                      label="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å *"
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å"
                      error={errors.is_active?.message}
                      onChange={(val) => onChange(val === "true")}
                      value={value?.toString()}
                    />
                  )}
                />

                <Controller
                  name="is_visible"
                  control={control}
                  render={({ field: { onChange, value } }) => (
                    <Select
                      options={[
                        { value: "true", label: "–í–∏–¥–∏–º–æ" },
                        { value: "false", label: "–°–∫—Ä—ã—Ç–æ" },
                      ]}
                      label="–í–∏–¥–∏–º–æ—Å—Ç—å *"
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å"
                      error={errors.is_visible?.message}
                      onChange={(val) => onChange(val === "true")}
                      value={value?.toString()}
                    />
                  )}
                />
              </div>
            </div>
            {/* –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ */}
            <div className="bg-white/5 rounded-2xl">
              <div className="flex items-center gap-2 mb-4">
                <span className="text-lg">‚è∞</span>
                <h3 className="text-white font-semibold text-lg">
                  –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
                </h3>
              </div>

              <div className="flex flex-col gap-4">
                <Controller
                  name="starts_at"
                  control={control}
                  render={({ field: { onChange, value } }) => (
                    <Input
                      label="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞"
                      type="datetime-local"
                      placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞"
                      error={errors.starts_at?.message}
                      value={value ? value.toISOString().slice(0, 16) : ""}
                      onChange={(e) =>
                        onChange(
                          e.target.value ? new Date(e.target.value) : undefined
                        )
                      }
                    />
                  )}
                />

                <p className="text-white/60 text-sm">
                  üí° –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å—Ä–∞–∑—É
                </p>
              </div>
            </div>

            <button type="submit" style={{ display: "none" }} />
          </div>
        </form>
      </div>
    );
  }
);

EditTaskForm.displayName = "EditTaskForm";

export default EditTaskForm;
