// components/features/lootbox/edit-lootbox-task-wrapper.tsx
"use client";

import TelegramBackButton from "@/components/common/telegram-back-button";
import EditLootBoxTaskForm, {
  EditLootBoxTaskFormRef,
  EditLootBoxTaskFormData,
} from "./edit-lootbox-task-form";
import MainLayout from "@/components/layout/main-layout";
import ActionButton from "@/components/ui/action-button";
import showToast from "@/components/ui/custom-toast";
import { hapticFeedback } from "@/lib/haptic-feedback";
import { useRouter } from "next/navigation";
import { useRef, useState, useTransition } from "react";
import { LootBoxTask } from "@/lib/types/lootbox";

interface EditLootBoxTaskWrapperProps {
  task: LootBoxTask;
  onEditTask: (data: EditLootBoxTaskFormData) => Promise<any>;
}

export default function EditLootBoxTaskWrapper({
  task,
  onEditTask,
}: EditLootBoxTaskWrapperProps) {
  const formRef = useRef<EditLootBoxTaskFormRef>(null);
  const [isFormValid, setIsFormValid] = useState(false);
  const [isPending, startTransition] = useTransition();
  const router = useRouter();

  const handleSubmit = async (data: EditLootBoxTaskFormData) => {
    console.log("üìù [CLIENT] Edit LootBox task form submitted:", data);
    console.log("üìã [CLIENT] Original task:", task);

    startTransition(async () => {
      try {
        const result = await onEditTask(data);

        if (!result.success) {
          hapticFeedback("error");
          showToast.error(result.error || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
          console.error("‚ùå [CLIENT] Edit error:", result.error);
          return;
        }

        hapticFeedback("success");
        showToast.success("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        router.push("/tasks");

        console.log("‚úÖ [CLIENT] LootBox task updated successfully");
      } catch (error) {
        console.error("‚ùå [CLIENT] Edit LootBox task error:", error);
        hapticFeedback("error");
        showToast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
      }
    });
  };

  const handleEditTask = () => {
    console.log("üñ±Ô∏è [CLIENT] Edit LootBox task button clicked");
    if (formRef.current) {
      console.log("Submitting edit form...");
      formRef.current.submitForm();
    }
  };

  return (
    <MainLayout
      bottomBar={
        <ActionButton
          onClick={handleEditTask}
          disabled={!isFormValid}
          isLoading={isPending}
        >
          {isPending ? "–°–æ—Ö—Ä–∞–Ω—è–µ–º..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
        </ActionButton>
      }
    >
      <TelegramBackButton />
      <h1 className="text-white text-2xl font-sans mb-4">
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤
      </h1>
      <p className="text-white/70 text-sm mb-6">
        –í–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–∏–µ
      </p>

      <EditLootBoxTaskForm
        ref={formRef}
        task={task}
        onSubmit={handleSubmit}
        onValidationChange={setIsFormValid}
      />
    </MainLayout>
  );
}
