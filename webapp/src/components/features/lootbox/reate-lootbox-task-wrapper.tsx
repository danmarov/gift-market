// components/features/lootbox/create-lootbox-task-wrapper.tsx
"use client";

import TelegramBackButton from "@/components/common/telegram-back-button";
import CreateLootBoxTaskForm, {
  CreateLootBoxTaskFormRef,
  CreateLootBoxTaskFormData,
} from "./create-lootbox-task-form";
import MainLayout from "@/components/layout/main-layout";
import ActionButton from "@/components/ui/action-button";
import showToast from "@/components/ui/custom-toast";
import { hapticFeedback } from "@/lib/haptic-feedback";
import { useRouter } from "next/navigation";
import { useRef, useState, useTransition } from "react";

interface CreateLootBoxTaskWrapperProps {
  onCreateTask: (data: CreateLootBoxTaskFormData) => Promise<any>;
}

export default function CreateLootBoxTaskWrapper({
  onCreateTask,
}: CreateLootBoxTaskWrapperProps) {
  const formRef = useRef<CreateLootBoxTaskFormRef>(null);
  const [isFormValid, setIsFormValid] = useState(false);
  const [isPending, startTransition] = useTransition();
  const router = useRouter();

  const handleSubmit = async (data: CreateLootBoxTaskFormData) => {
    console.log("üìù [CLIENT] LootBox task form submitted:", data);

    startTransition(async () => {
      try {
        const result = await onCreateTask(data);

        if (result.success) {
          console.log("üéâ [CLIENT] LootBox task created:", result.data);
          showToast.success(
            result.message || "–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
          );
          if (formRef.current) {
            formRef.current.resetForm();
          }
          hapticFeedback("success");
          router.push("/tasks");
        } else {
          console.error("‚ùå [CLIENT] Error:", result.error);
          showToast.error(result.error || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
          hapticFeedback("error");
        }
      } catch (error) {
        console.error("üí• [CLIENT] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LootBox –∑–∞–¥–∞—á–∏:", error);
        showToast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        hapticFeedback("error");
      }
    });
  };

  const handleCreateTask = () => {
    console.log("üñ±Ô∏è [CLIENT] –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LootBox –∑–∞–¥–∞—á–∏ –Ω–∞–∂–∞—Ç–∞");
    if (formRef.current) {
      formRef.current.submitForm();
    }
  };

  return (
    <MainLayout
      bottomBar={
        <ActionButton
          onClick={handleCreateTask}
          disabled={!isFormValid}
          isLoading={isPending}
        >
          {isPending ? "–°–æ–∑–¥–∞–µ–º..." : "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"}
        </ActionButton>
      }
    >
      <TelegramBackButton />
      <h1 className="text-white text-2xl font-sans mb-4">
        –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
      </h1>
      <p className="text-white/70 text-sm mb-6">
        –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
        –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
      </p>

      <CreateLootBoxTaskForm
        ref={formRef}
        onSubmit={handleSubmit}
        onValidationChange={setIsFormValid}
      />
    </MainLayout>
  );
}
