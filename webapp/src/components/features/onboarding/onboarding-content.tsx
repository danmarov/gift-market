"use client";

import { useState, useRef, useEffect } from "react";
import { AUTH_QUERY_KEY } from "../auth/hooks/use-auth";
import GiftAnimation from "./gift-animation";
import { UserOnboardingStatus } from "@/lib/types/user";
import { useQueryClient } from "@tanstack/react-query";
import CongratsMessage from "./congrats-message";
import LoadingScreen from "@/components/common/loading-screen";
import CustomRevealAnimation from "./custom-reveal-animation";

interface OnboardingContentProps {
  onboardingStatus: UserOnboardingStatus;
}

interface GiftData {
  gift: {
    name: string;
    mediaUrl: string;
    revealAnimation?: string | null;
  };
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
const giftCache = new Map<string, GiftData>();
let isLoading = false;

export default function OnboardingContent({
  onboardingStatus,
}: OnboardingContentProps) {
  const queryClient = useQueryClient();
  const [showCongrats, setShowCongrats] = useState(false);
  const [giftData, setGiftData] = useState<GiftData | null>(null);
  const [localLoading, setLocalLoading] = useState(true);
  const hasInitialized = useRef(false);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–Ω–∞—á–∞–ª–∞
    const cacheKey = `gift-${onboardingStatus}`;
    const cachedData = giftCache.get(cacheKey);

    if (cachedData) {
      console.log("üéØ Using cached gift data");
      setGiftData(cachedData);
      setLocalLoading(false);
      hasInitialized.current = true;
      return;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (isLoading || hasInitialized.current) {
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    if (onboardingStatus !== "NEW" && onboardingStatus !== "GIFT_REVEALED") {
      setLocalLoading(false);
      return;
    }

    isLoading = true;
    hasInitialized.current = true;

    const loadData = async () => {
      try {
        console.log("üé≤ Loading gift data for status:", onboardingStatus);

        let result: GiftData | null = null;

        if (onboardingStatus === "NEW") {
          const { drawGift } = await import("@/lib/actions/gift/draw-gift");
          const drawResult = await drawGift();

          if (drawResult.success) {
            console.log("‚úÖ Gift drawn:", drawResult.data);

            result = {
              gift: {
                name: drawResult.data.gift.name,
                mediaUrl: drawResult.data.gift.mediaUrl,
                revealAnimation:
                  (drawResult.data.gift as any).revealAnimation || null,
              },
            };

            // –†–µ–≤–∞–ª–∏–¥–∏—Ä—É–µ–º auth –¥–∞–Ω–Ω—ã–µ
            await queryClient.invalidateQueries({ queryKey: AUTH_QUERY_KEY });
          }
        } else if (onboardingStatus === "GIFT_REVEALED") {
          const { getUserOnboardingGift } = await import(
            "@/lib/actions/gift/get-user-onboarding-gift"
          );
          const giftResult = await getUserOnboardingGift();

          if (giftResult.success) {
            result = giftResult.data;
          }
        }

        if (result) {
          // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          giftCache.set(cacheKey, result);
          setGiftData(result);
          console.log("üíæ Cached gift data for", cacheKey);
        }
      } catch (error) {
        console.error("‚ùå Error loading gift data:", error);
      } finally {
        isLoading = false;
        setLocalLoading(false);
      }
    };

    loadData();
  }, [onboardingStatus, queryClient]);

  const handleAnimationComplete = () => {
    console.log("üé¨ Animation completed - showing congrats");
    setShowCongrats(true);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  if (localLoading) {
    return null;
    // return <LoadingScreen disableLayout />;
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (!giftData?.gift) {
    return (
      <div className="size-full grid place-items-center relative select-none flex-1">
        <div className="text-white">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∞—Ä–∫–∞</div>
      </div>
    );
  }

  console.log("üé® Showing content for gift:", {
    name: giftData.gift.name,
    hasCustomAnimation: !!(giftData.gift as any).revealAnimation,
    status: onboardingStatus,
  });

  const hasCustomAnimation = !!(giftData.gift as any).revealAnimation;

  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º CustomRevealAnimation
  if (hasCustomAnimation) {
    return (
      <div className="size-full grid place-items-center relative select-none flex-1">
        <CustomRevealAnimation
          revealAnimation={(giftData.gift as any).revealAnimation}
          giftName={giftData.gift.name}
          onAnimationComplete={handleAnimationComplete}
          skipAnimation={onboardingStatus === "GIFT_REVEALED"}
        />
      </div>
    );
  }

  // –°—Ç–∞—Ç—É—Å NEW –±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ - –æ–±—ã—á–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
  if (onboardingStatus === "NEW") {
    return (
      <div className="size-full grid place-items-center relative select-none flex-1">
        <GiftAnimation
          onAnimationComplete={handleAnimationComplete}
          showCongrats={showCongrats}
        />

        {showCongrats && (
          <div className="absolute inset-0 grid place-items-center">
            <CongratsMessage gift={giftData.gift} />
          </div>
        )}
      </div>
    );
  }

  // –°—Ç–∞—Ç—É—Å GIFT_REVEALED –±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ - –æ–±—ã—á–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
  return (
    <div className="size-full grid place-items-center relative select-none flex-1">
      <CongratsMessage gift={giftData.gift} />
    </div>
  );
}
