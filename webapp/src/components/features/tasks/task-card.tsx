import { TaskActionType, TaskIconType } from "@/lib/types/task";
import { cn } from "@sglara/cn";
import React from "react";

interface TaskCardProps {
  className?: string;
  icon: TaskIconType;
  title: string;
  reward: string;
  action: TaskActionType;
  timerValue?: string;
  onAction?: () => void;
  isLoading?: boolean;
  onCardClick?: () => void;
}

const icons = {
  telegram: (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width={22}
      height={22}
      viewBox="0 0 22 22"
      fill="none"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M2.88407 10.0107C7.17816 7.98488 10.0368 6.6388 11.4722 5.98575C15.5578 4.13324 16.4166 3.81338 16.9687 3.80005C17.0914 3.80005 17.3613 3.8267 17.5453 3.98663C17.6925 4.11991 17.7293 4.29317 17.7539 4.42644C17.7784 4.55972 17.8029 4.83959 17.7784 5.05283C17.5576 7.58505 16.6006 13.729 16.1099 16.5544C15.9013 17.7539 15.4964 18.1537 15.1038 18.1937C14.245 18.2737 13.5947 17.5807 12.7727 16.9942C11.4722 16.0746 10.7484 15.5016 9.48469 14.5953C8.02471 13.5558 8.9694 12.9827 9.80368 12.0498C10.0245 11.8099 13.791 8.07817 13.8647 7.74498C13.8769 7.705 13.8769 7.54507 13.791 7.4651C13.7052 7.38514 13.5825 7.41179 13.4843 7.43845C13.3494 7.4651 11.2882 8.95778 7.27631 11.9032C6.6874 12.343 6.15985 12.5562 5.68136 12.5429C5.1538 12.5295 4.14776 12.223 3.38709 11.9565C2.46693 11.6366 1.7308 11.4633 1.79215 10.9036C1.82896 10.6104 2.19702 10.3172 2.88407 10.0107Z"
        fill="white"
      />
      <g style={{ mixBlendMode: "hue" }}>
        <rect width={22} height={22} fill="#93398A" />
      </g>
    </svg>
  ),

  tiktok: (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width={22}
      height={22}
      viewBox="0 0 22 22"
      fill="none"
    >
      <path
        d="M16.8984 7.15469C15.8672 7.15469 14.9141 6.83594 14.1328 6.28906V11.0078C14.1328 13.6719 12.0234 15.8125 9.32812 15.8125C6.63281 15.8125 4.52344 13.6719 4.52344 11.0078C4.52344 8.34375 6.63281 6.20312 9.32812 6.20312C9.57812 6.20312 9.82812 6.23438 10.0625 6.26562V8.90625C9.82812 8.84375 9.57812 8.8125 9.32812 8.8125C8.05469 8.8125 7.03125 9.83594 7.03125 11.1094C7.03125 12.3828 8.05469 13.4062 9.32812 13.4062C10.6016 13.4062 11.6484 12.3516 11.6484 11.0781V2.1875H14.1328C14.1328 4.57812 15.5234 6.60156 17.5 7.125V9.76562C17.1719 9.79688 16.875 9.82812 16.5469 9.82812C16.3281 9.82812 16.1094 9.79688 15.8906 9.76562V7.15469H16.8984Z"
        fill="white"
      />
      <g style={{ mixBlendMode: "hue" }}>
        <rect width={22} height={22} fill="#93398A" />
      </g>
    </svg>
  ),

  youtube: (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width={22}
      height={22}
      viewBox="0 0 22 22"
      fill="none"
    >
      <path
        d="M19.3125 6.64062C19.1562 6.04688 18.7031 5.59375 18.1094 5.4375C16.9844 5.15625 11 5.15625 11 5.15625C11 5.15625 5.01562 5.15625 3.89062 5.4375C3.29688 5.59375 2.84375 6.04688 2.6875 6.64062C2.40625 7.76562 2.40625 10.0781 2.40625 10.0781C2.40625 10.0781 2.40625 12.3906 2.6875 13.5156C2.84375 14.1094 3.29688 14.5625 3.89062 14.7188C5.01562 15 11 15 11 15C11 15 16.9844 15 18.1094 14.7188C18.7031 14.5625 19.1562 14.1094 19.3125 13.5156C19.5938 12.3906 19.5938 10.0781 19.5938 10.0781C19.5938 10.0781 19.5938 7.76562 19.3125 6.64062ZM9.0625 12.5781V7.57812L14.0312 10.0781L9.0625 12.5781Z"
        fill="white"
      />
      <g style={{ mixBlendMode: "hue" }}>
        <rect width={22} height={22} fill="#93398A" />
      </g>
    </svg>
  ),

  instagram: (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width={22}
      height={22}
      viewBox="0 0 22 22"
      fill="none"
    >
      <path
        d="M11 5.5C13.4844 5.5 15.5 7.51562 15.5 10C15.5 12.4844 13.4844 14.5 11 14.5C8.51562 14.5 6.5 12.4844 6.5 10C6.5 7.51562 8.51562 5.5 11 5.5ZM11 12.8125C12.5625 12.8125 13.8125 11.5625 13.8125 10C13.8125 8.4375 12.5625 7.1875 11 7.1875C9.4375 7.1875 8.1875 8.4375 8.1875 10C8.1875 11.5625 9.4375 12.8125 11 12.8125ZM16.4375 5.3125C16.4375 5.96875 15.9062 6.5 15.25 6.5C14.5938 6.5 14.0625 5.96875 14.0625 5.3125C14.0625 4.65625 14.5938 4.125 15.25 4.125C15.9062 4.125 16.4375 4.65625 16.4375 5.3125ZM19.5 6.5C19.5 5.03125 19.5 3.5625 19.3125 2.09375C19.125 0.625 18.7812 -0.59375 17.5625 -1.8125C16.3438 -3.03125 15.125 -3.375 13.6562 -3.5625C12.1875 -3.75 10.7188 -3.75 9.25 -3.75C7.78125 -3.75 6.3125 -3.5625 4.84375 -3.375C3.375 -3.1875 2.15625 -2.84375 0.9375 -1.625C-0.28125 -0.40625 -0.625 0.8125 -0.8125 2.28125C-1 3.75 -1 5.21875 -1 6.6875C-1 8.15625 -0.8125 9.625 -0.625 11.0938C-0.4375 12.5625 -0.09375 13.7812 1.125 15C2.34375 16.2188 3.5625 16.5625 5.03125 16.75C6.5 16.9375 7.96875 16.9375 9.4375 16.9375C10.9062 16.9375 12.375 16.75 13.8438 16.5625C15.3125 16.375 16.5312 16.0312 17.75 14.8125C18.9688 13.5938 19.3125 12.375 19.5 10.9062C19.6875 9.4375 19.6875 7.96875 19.5 6.5ZM17.4375 12.5C17.3125 13.5938 16.7812 14.125 15.6875 14.25C14.2812 14.4375 10.9688 14.4375 9.5625 14.25C8.46875 14.125 7.9375 13.5938 7.8125 12.5C7.625 11.0938 7.625 7.78125 7.8125 6.375C7.9375 5.28125 8.46875 4.75 9.5625 4.625C10.9688 4.4375 14.2812 4.4375 15.6875 4.625C16.7812 4.75 17.3125 5.28125 17.4375 6.375C17.625 7.78125 17.625 11.0938 17.4375 12.5Z"
        fill="white"
      />
      <g style={{ mixBlendMode: "hue" }}>
        <rect width={22} height={22} fill="#93398A" />
      </g>
    </svg>
  ),

  twitter: (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width={22}
      height={22}
      viewBox="0 0 22 22"
      fill="none"
    >
      <path
        d="M19.5 5.46875C18.8438 5.75 18.1562 5.96875 17.4375 6.09375C18.1875 5.65625 18.75 4.96875 19 4.15625C18.3125 4.5625 17.5625 4.84375 16.75 5C16.0625 4.3125 15.125 3.90625 14.0938 3.90625C12.0938 3.90625 10.4688 5.53125 10.4688 7.53125C10.4688 7.8125 10.5 8.09375 10.5625 8.34375C7.5 8.1875 4.78125 6.75 2.96875 4.5625C2.65625 5.0625 2.46875 5.65625 2.46875 6.3125C2.46875 7.53125 3.09375 8.59375 4.03125 9.21875C3.4375 9.1875 2.90625 9.03125 2.4375 8.78125V8.8125C2.4375 10.5625 3.6875 12.0312 5.34375 12.375C5.0625 12.4375 4.75 12.5 4.40625 12.5C4.15625 12.5 3.9375 12.4688 3.6875 12.4375C4.1875 13.875 5.53125 14.9375 7.125 14.9688C5.875 15.9688 4.28125 16.5625 2.53125 16.5625C2.25 16.5625 1.96875 16.5312 1.6875 16.5C3.3125 17.5625 5.21875 18.1875 7.28125 18.1875C14.0938 18.1875 17.8125 12.5625 17.8125 7.9375C17.8125 7.78125 17.8125 7.625 17.8125 7.46875C18.5312 6.96875 19.1562 6.34375 19.6562 5.625C18.9688 5.9375 18.25 6.125 17.5 6.1875C18.2812 5.71875 18.875 4.96875 19.1562 4.09375C18.4375 4.53125 17.6562 4.84375 16.8125 5.03125C16.125 4.28125 15.1562 3.8125 14.0938 3.8125C12.0938 3.8125 10.4688 5.4375 10.4688 7.4375C10.4688 7.71875 10.5 8 10.5625 8.25C7.5 8.09375 4.78125 6.65625 2.96875 4.46875C2.65625 4.96875 2.46875 5.5625 2.46875 6.21875C2.46875 7.4375 3.09375 8.5 4.03125 9.125C3.4375 9.09375 2.90625 8.9375 2.4375 8.6875V8.71875C2.4375 10.4688 3.6875 11.9375 5.34375 12.2812C5.0625 12.3438 4.75 12.4062 4.40625 12.4062C4.15625 12.4062 3.9375 12.375 3.6875 12.3438C4.1875 13.7812 5.53125 14.8438 7.125 14.875C5.875 15.875 4.28125 16.4688 2.53125 16.4688C2.25 16.4688 1.96875 16.4375 1.6875 16.4062C3.3125 17.4688 5.21875 18.0938 7.28125 18.0938C14.0938 18.0938 17.8125 12.4688 17.8125 7.84375C17.8125 7.6875 17.8125 7.53125 17.8125 7.375C18.5312 6.875 19.1562 6.25 19.6562 5.53125C18.9688 5.84375 18.25 6.03125 17.5 6.09375C18.2812 5.625 18.875 4.875 19.1562 4C18.4375 4.4375 17.6562 4.75 16.8125 4.9375C16.125 4.1875 15.1562 3.71875 14.0938 3.71875C12.0938 3.71875 10.4688 5.34375 10.4688 7.34375C10.4688 7.625 10.5 7.90625 10.5625 8.15625C7.5 8 4.78125 6.5625 2.96875 4.375C2.65625 4.875 2.46875 5.46875 2.46875 6.125C2.46875 7.34375 3.09375 8.40625 4.03125 9.03125C3.4375 9 2.90625 8.84375 2.4375 8.59375V8.625C2.4375 10.375 3.6875 11.8438 5.34375 12.1875C5.0625 12.25 4.75 12.3125 4.40625 12.3125C4.15625 12.3125 3.9375 12.2812 3.6875 12.25C4.1875 13.6875 5.53125 14.75 7.125 14.7812C5.875 15.7812 4.28125 16.375 2.53125 16.375C2.25 16.375 1.96875 16.3438 1.6875 16.3125C3.3125 17.375 5.21875 18 7.28125 18C14.0938 18 17.8125 12.375 17.8125 7.75C17.8125 7.59375 17.8125 7.4375 17.8125 7.28125C18.5312 6.78125 19.1562 6.15625 19.6562 5.4375C18.9688 5.75 18.25 5.9375 17.5 6C18.2812 5.53125 18.875 4.78125 19.1562 3.90625C18.4375 4.34375 17.6562 4.65625 16.8125 4.84375C16.125 4.09375 15.1562 3.625 14.0938 3.625Z"
        fill="white"
      />
      <g style={{ mixBlendMode: "hue" }}>
        <rect width={22} height={22} fill="#93398A" />
      </g>
    </svg>
  ),
};

const renderAction = (
  action: TaskActionType,
  timerValue?: string,
  isLoading?: boolean,
  onAction?: () => void
) => {
  const handleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    onAction?.();
  };
  switch (action) {
    case "timer":
      return (
        <button
          className="task-action-timer"
          disabled={isLoading}
          onClick={handleClick}
        >
          <span className="font-mono">{timerValue || "00:00:00"}</span>
        </button>
      );

    case "check":
      return (
        <button
          onClick={handleClick}
          className="task-action-check font-mono"
          disabled={isLoading}
        >
          {isLoading ? "⏳" : "Проверить"}
        </button>
      );

    case "completed":
      return (
        <div className="task-action-completed">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width={10}
            height={8}
            viewBox="0 0 10 8"
            fill="none"
          >
            <path
              d="M3.5362 8C3.07455 8 2.61186 7.78325 2.25683 7.34709L0.159732 4.77279C-0.0482448 4.51669 -0.0540219 4.09453 0.147652 3.82977C0.349326 3.56567 0.681773 3.55833 0.890275 3.81443L2.98737 6.38873C3.29513 6.76554 3.78934 6.75953 4.09185 6.37606L9.10902 0.188398C9.31699 -0.0683654 9.64944 -0.0616964 9.85164 0.202403C10.0538 0.466502 10.0486 0.888661 9.84061 1.14542L4.8287 7.32641C4.47629 7.77458 4.00677 8 3.5362 8Z"
              fill="#BD8BB4"
            />
          </svg>
        </div>
      );

    case "claim":
      return (
        <button onClick={handleClick} className="task-action-claim font-mono">
          Получить награду
        </button>
      );

    case "available":
    default:
      return (
        <button
          onClick={handleClick}
          className="task-action-check"
          disabled={isLoading}
        >
          {isLoading ? "⏳" : "Перейти"}
        </button>
      );
  }
};

export default function TaskCard({
  className = "",
  icon,
  title,
  reward,
  action,
  timerValue,
  onAction,
  isLoading = false,
  onCardClick,
}: TaskCardProps) {
  const handleCardClick = (e: React.MouseEvent) => {
    if ((e.target as HTMLElement).closest("button")) {
      return;
    }
    onCardClick?.();
  };

  return (
    <div
      className={cn("task-card-backdrop", className)}
      role="button"
      onClick={handleCardClick}
    >
      <div className="flex items-center justify-between w-full">
        <div className="flex items-center gap-3">
          <span className="task-card-icon flex-shrink-0">{icons[icon]}</span>
          <div className="flex flex-col gap-0.5">
            <span className="font-mono text-sm font-medium text-white">
              {title}
            </span>
            <span className="text-sans text-xs text-[#E7D3E9] leading-3">
              {reward}
            </span>
          </div>
        </div>
        <div className="flex-shrink-0 ml-auto">
          {renderAction(action, timerValue, isLoading, onAction)}
        </div>
      </div>
    </div>
  );
}
