import toast from "react-hot-toast";
import React from "react";

// –¢–∏–ø—ã —Ç–æ—Å—Ç–æ–≤
type ToastType = "success" | "warning" | "error";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ—Å—Ç–∞
interface CustomToastProps {
  type: ToastType;
  message: string;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ—Å—Ç–∞
const CustomToast: React.FC<CustomToastProps> = ({ type, message }) => {
  const getIcon = () => {
    switch (type) {
      case "success":
        return "‚úÖ";
      case "warning":
        return "‚ö†Ô∏è";
      case "error":
        return "‚ùå";
      default:
        return "üìÑ";
    }
  };

  const getGradientStyle = () => {
    switch (type) {
      case "success":
        return {
          background:
            "linear-gradient(135deg, rgba(0, 255, 127, 0.3), rgba(50, 205, 50, 0.4))",
        };
      case "warning":
        return {
          background:
            "linear-gradient(135deg, rgba(245, 158, 11, 0.2), rgba(217, 119, 6, 0.3))",
        };
      case "error":
        return {
          background:
            "linear-gradient(135deg, rgba(239, 68, 68, 0.2), rgba(185, 28, 28, 0.3))",
        };
      default:
        return {
          background:
            "linear-gradient(135deg, rgba(168, 85, 247, 0.2), rgba(147, 51, 234, 0.3))",
        };
    }
  };

  return (
    <div
      className="relative backdrop-blur-md  text-white p-4 rounded-xl shadow-lg min-w-[280px] max-w-[380px]"
      style={{
        ...getGradientStyle(),
        border: "1px solid rgba(255,255,255,0.2)",
      }}
    >
      <div className="flex items-center space-x-3">
        {/* <span className="text-lg">{getIcon()}</span> */}
        <span className="font-medium text-sm leading-relaxed ml-1">
          {message}
        </span>
      </div>
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ—Å—Ç–æ–≤
export const showToast = {
  success: (message: string, duration: number = 4000) => {
    toast((t) => <CustomToast type="success" message={message} />, {
      duration,
      position: "top-center",
    });
  },

  warning: (message: string, duration: number = 4000) => {
    toast((t) => <CustomToast type="warning" message={message} />, {
      duration,
      position: "top-center",
    });
  },

  error: (message: string, duration: number = 5000) => {
    toast((t) => <CustomToast type="error" message={message} />, {
      duration,
      position: "top-center",
    });
  },

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
  custom: (
    message: string,
    type: ToastType = "success",
    duration: number = 1500
  ) => {
    toast((t) => <CustomToast type={type} message={message} />, {
      duration,
      position: "top-center",
    });
  },
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ—Å—Ç–∏
export default showToast;
