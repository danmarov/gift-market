// actions/admin/create-demo-prize.ts
"use server";
import { JWTSession } from "@/lib/types/session";
import { withServerAuth } from "../auth/with-server-auth";
import { CreateDemoPrizeFormData } from "@/components/features/admin/demo/create/create-demo-prize-form";
import { z } from "zod";
import { createDemoPrize as createDemoPrizeDb } from "database";
import { uploadToCloudinary, validateCloudinaryConfig } from "../cloudinary";

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è server action
const createDemoPrizeSchema = z.object({
  name: z.string().min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
  description: z.string().optional().default(""),
  mediaFile: z.instanceof(File).nullable().optional(),
});

export type CreateDemoPrizeResult =
  | { success: true; data: { id: number; message: string } }
  | { success: false; error: string; fieldErrors?: Record<string, string[]> };

async function _createDemoPrize(
  session: JWTSession,
  formData: CreateDemoPrizeFormData
): Promise<CreateDemoPrizeResult> {
  console.log("üéØ [SERVER ACTION] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–µ–º–æ-–ø—Ä–∏–∑–∞:", {
    name: formData.name,
    description: formData.description,
    mediaFile: formData.mediaFile
      ? {
          name: formData.mediaFile.name,
          size: formData.mediaFile.size,
          type: formData.mediaFile.type,
        }
      : null,
  });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Cloudinary
    if (!validateCloudinaryConfig()) {
      return {
        success: false,
        error: "Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.",
      };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ zod
    console.log("üîç [SERVER ACTION] –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...");
    const validatedData = createDemoPrizeSchema.parse(formData);
    console.log("‚úÖ [SERVER ACTION] –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã:", {
      name: validatedData.name,
      description: validatedData.description,
      hasMediaFile: !!validatedData.mediaFile,
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
    let mediaUrl = "";
    let cloudinaryPublicId = "";

    if (validatedData.mediaFile) {
      console.log("üìÅ [SERVER ACTION] –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞...");

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      const allowedTypes = ["image/gif", "video/mp4", "video/webm"];
      const isTgs = validatedData.mediaFile.name.endsWith(".tgs");

      if (!allowedTypes.includes(validatedData.mediaFile.type) && !isTgs) {
        return {
          success: false,
          error:
            "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .tgs, .gif, .mp4, .webm",
        };
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
      const maxSize = 10 * 1024 * 1024; // 10MB
      if (validatedData.mediaFile.size > maxSize) {
        return {
          success: false,
          error: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB",
        };
      }

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary
        console.log("‚òÅÔ∏è [SERVER ACTION] –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Cloudinary...");
        const uploadResult = await uploadToCloudinary(
          validatedData.mediaFile,
          "demo-prizes"
        );

        mediaUrl = uploadResult.secureUrl;
        cloudinaryPublicId = uploadResult.publicId;

        console.log("‚úÖ [SERVER ACTION] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloudinary:", {
          url: mediaUrl,
          publicId: cloudinaryPublicId,
          size: uploadResult.bytes,
          format: uploadResult.format,
        });
      } catch (uploadError) {
        console.error(
          "‚ùå [SERVER ACTION] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary:",
          uploadError
        );
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${
            uploadError instanceof Error
              ? uploadError.message
              : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
          }`,
        };
      }
    } else {
      console.log("‚ö†Ô∏è [SERVER ACTION] –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω");
      return {
        success: false,
        error: "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –¥–µ–º–æ-–ø—Ä–∏–∑–∞",
      };
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î
    const demoPrizeData = {
      name: validatedData.name,
      description: validatedData.description || "",
      mediaUrl: mediaUrl,
      isActive: true,
      cloudinaryPublicId: cloudinaryPublicId,
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    console.log("üíæ [SERVER ACTION] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...");
    const createdDemoPrize = await createDemoPrizeDb(demoPrizeData);

    console.log(`üéâ [SERVER ACTION] –î–µ–º–æ-–ø—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:`, {
      id: createdDemoPrize.id,
      name: createdDemoPrize.name,
      mediaUrl: createdDemoPrize.mediaUrl,
      cloudinaryPublicId: cloudinaryPublicId,
    });

    return {
      success: true,
      data: {
        id: createdDemoPrize.id,
        message: `–î–µ–º–æ-–ø—Ä–∏–∑ "${createdDemoPrize.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: ${createdDemoPrize.id}`,
      },
    };
  } catch (error) {
    console.error("‚ùå [SERVER ACTION] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ-–ø—Ä–∏–∑–∞:", error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ zod
    if (error instanceof z.ZodError) {
      const fieldErrors: Record<string, string[]> = {};

      error.issues.forEach((err) => {
        const path = err.path.join(".");
        if (!fieldErrors[path]) {
          fieldErrors[path] = [];
        }
        fieldErrors[path].push(err.message);
      });

      console.log("üî• [SERVER ACTION] –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", fieldErrors);

      return {
        success: false,
        error: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
        fieldErrors,
      };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ë–î
    if (error instanceof Error) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      if (error.message.includes("name") && error.message.includes("unique")) {
        return {
          success: false,
          error: "–î–µ–º–æ-–ø—Ä–∏–∑ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        };
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    return {
      success: false,
      error:
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    };
  }
}

export const createDemoPrize = withServerAuth(_createDemoPrize, {
  requireRole: "ADMIN",
});
