// lib/actions/admin/create-task.ts
"use server";

import { createTask } from "database";
import { createTaskSchema, CreateTaskFormData } from "@/lib/types/task";
import { revalidatePath } from "next/cache";

export async function createTaskAction(data: CreateTaskFormData) {
  try {
    console.log("üîß [SERVER] Creating task with data:", data);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const validationResult = createTaskSchema.safeParse(data);

    if (!validationResult.success) {
      console.error("‚ùå [SERVER] Validation failed:", validationResult.error);
      return {
        success: false,
        error: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
        fieldErrors: validationResult.error.flatten().fieldErrors,
      };
    }

    const validData = validationResult.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ - –¥–µ–ª–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç
    const now = new Date();
    let startsAt = validData.starts_at;

    if (!startsAt || startsAt <= new Date(now.getTime() + 30000)) {
      startsAt = undefined; // –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω new Date() –≤ createTask
      console.log("‚è∞ [SERVER] Start date reset to immediate");
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º metadata
    const metadata =
      validData.type === "TELEGRAM_SUBSCRIPTION"
        ? {
            channelUrl: validData.channel_url,
            chatId: validData.chat_id,
          }
        : {};

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ë–î
    const task = await createTask({
      type: validData.type,
      duration: validData.duration,
      title: validData.title,
      description: validData.description,
      reward: validData.reward,
      icon: validData.icon,
      metadata,
      maxCompletions: validData.max_completions,
      startsAt,
    });

    console.log("‚úÖ [SERVER] Task created successfully:", task.id);

    // –†–µ–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
    // revalidatePath("/tasks");
    // revalidatePath("/admin/tasks");

    return {
      success: true,
      data: {
        task,
        message: `–ó–∞–¥–∞–Ω–∏–µ "${task.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!`,
      },
    };
  } catch (error) {
    console.error("üí• [SERVER] Error creating task:", error);

    return {
      success: false,
      error:
        error instanceof Error
          ? error.message
          : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è",
    };
  }
}
