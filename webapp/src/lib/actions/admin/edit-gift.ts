import {
  updateGift as updateGiftDb,
  findGiftById,
  UpdateGiftData,
  Gift,
  Prisma,
} from "database";
import { JWTSession } from "@/lib/types/session";
import { editGiftSchema } from "@/lib/types/gift";
import { withServerAuth } from "../auth/with-server-auth";
import { ZodError } from "zod";
import {
  uploadToCloudinary,
  validateCloudinaryConfig,
  deleteFromCloudinary,
} from "../cloudinary";
import { revalidateTag } from "next/cache";
import { CACHE_CONSTANTS, createCacheTag } from "@/lib/revalidation-keys";

export type EditGiftResult =
  | { success: true; data: Gift }
  | { success: false; error: string; fieldErrors?: Record<string, string[]> };

interface EditGiftFormDataWithFile extends UpdateGiftData {
  id: string;
  revealAnimationFile?: File | null;
  deleteRevealAnimation?: boolean;
}

async function _editGift(
  session: JWTSession,
  formData: EditGiftFormDataWithFile
): Promise<EditGiftResult> {
  console.log("üéÅ [SERVER ACTION] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:", {
    id: formData.id,
    name: formData.name,
    hasRevealAnimationFile: !!formData.revealAnimationFile,
    deleteRevealAnimation: !!formData.deleteRevealAnimation,
  });

  console.log("DELETE?:", formData.deleteRevealAnimation);

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ revealMediaId
    const currentGift = await findGiftById(formData.id, true);

    if (!currentGift) {
      return {
        success: false,
        error: "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Cloudinary –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∞–Ω–∏–º–∞—Ü–∏–∏
    if (formData.revealAnimationFile && !validateCloudinaryConfig()) {
      return {
        success: false,
        error: "Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.",
      };
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const updateData: any = { ...formData };

    // –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –°–†–ê–ó–£
    delete updateData.revealAnimationFile;
    delete updateData.deleteRevealAnimation;

    // –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
    if (formData.deleteRevealAnimation) {
      console.log("üóëÔ∏è [SERVER ACTION] –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞");

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Cloudinary –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (currentGift.revealMediaId) {
        console.log(
          "‚òÅÔ∏è [SERVER ACTION] –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Cloudinary:",
          currentGift.revealMediaId
        );
        try {
          await deleteFromCloudinary(currentGift.revealMediaId);
          console.log("‚úÖ [SERVER ACTION] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Cloudinary");
        } catch (deleteError) {
          console.warn(
            "‚ö†Ô∏è [SERVER ACTION] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:",
            deleteError
          );
        }
      }

      // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î
      updateData.revealAnimation = null;
      updateData.revealMediaId = null;
    }
    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    else if (formData.revealAnimationFile) {
      console.log(
        "üé¨ [SERVER ACTION] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞..."
      );

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      const allowedTypes = ["image/gif", "video/mp4", "video/webm"];
      const isTgs = formData.revealAnimationFile.name.endsWith(".tgs");

      if (!allowedTypes.includes(formData.revealAnimationFile.type) && !isTgs) {
        return {
          success: false,
          error:
            "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .tgs, .gif, .mp4, .webm",
        };
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
      const maxSize = 10 * 1024 * 1024; // 10MB
      if (formData.revealAnimationFile.size > maxSize) {
        return {
          success: false,
          error: "–§–∞–π–ª –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB",
        };
      }

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ Cloudinary
        console.log(
          "‚òÅÔ∏è [SERVER ACTION] –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ Cloudinary..."
        );
        const uploadResult = await uploadToCloudinary(
          formData.revealAnimationFile,
          "gift-reveal-animations"
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫ updateData
        updateData.revealAnimation = uploadResult.secureUrl;
        updateData.revealMediaId = uploadResult.publicId;

        console.log(
          "‚úÖ [SERVER ACTION] –ù–æ–≤—ã–π —Ñ–∞–π–ª –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:",
          {
            url: uploadResult.secureUrl,
            publicId: uploadResult.publicId,
            size: uploadResult.bytes,
            format: uploadResult.format,
          }
        );

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ Cloudinary –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (currentGift.revealMediaId) {
          console.log(
            "üóëÔ∏è [SERVER ACTION] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∞–Ω–∏–º–∞—Ü–∏–∏:",
            currentGift.revealMediaId
          );
          try {
            await deleteFromCloudinary(currentGift.revealMediaId);
            console.log(
              "‚úÖ [SERVER ACTION] –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            );
          } catch (deleteError) {
            console.warn(
              "‚ö†Ô∏è [SERVER ACTION] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞:",
              deleteError
            );
          }
        }
      } catch (uploadError) {
        console.error(
          "‚ùå [SERVER ACTION] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏:",
          uploadError
        );
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: ${
            uploadError instanceof Error
              ? uploadError.message
              : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
          }`,
        };
      }
    } else {
      console.log("‚ö†Ô∏è [SERVER ACTION] –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è");
    }

    console.log("üíæ [SERVER ACTION] –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:", updateData);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î –ë–ï–ó –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Zod (—Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ)
    const updatedGift = await updateGiftDb(formData.id, updateData);

    console.log("üéâ [SERVER ACTION] –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", {
      id: updatedGift.id,
      name: updatedGift.name,
      hasRevealAnimation: !!updatedGift.revealAnimation,
      animationDeleted: formData.deleteRevealAnimation,
    });
    revalidateTag(createCacheTag.giftData(formData.id));
    revalidateTag(CACHE_CONSTANTS.TAGS.GIFTS);

    return { success: true, data: updatedGift };
  } catch (error) {
    console.error(
      "‚ùå [SERVER ACTION] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞:",
      error
    );

    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      if (error.code === "P2025") {
        return { success: false, error: "Gift not found" };
      }
      if (error.code === "P2002") {
        return {
          success: false,
          error: "–ü–æ–¥–∞—Ä–æ–∫ —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        };
      }
    }

    console.error("Unexpected error in _editGift:", error);
    return { success: false, error: "Failed to update gift" };
  }
}

export const editGift = withServerAuth(_editGift, { requireRole: "ADMIN" });
