// lib/actions/admin/update-purchase.ts
"use server";

import {
  markPurchaseAsSent as dbMarkPurchaseAsSent,
  cancelPurchase as dbCancelPurchase,
} from "database";
import { revalidatePath } from "next/cache";
import { withServerAuth } from "../auth/with-server-auth";
import { JWTSession } from "@/lib/types/session";

export async function _markPurchaseAsSentAction(
  session: JWTSession,
  purchaseId: number,
  telegramMessageId?: number,
  adminNotes?: string
) {
  try {
    console.log("üöÄ [SERVER ACTION] Marking purchase as sent:", purchaseId);

    const updatedPurchase = await dbMarkPurchaseAsSent(
      purchaseId,
      telegramMessageId,
      adminNotes
    );

    console.log(
      "‚úÖ [SERVER ACTION] Purchase marked as sent:",
      updatedPurchase.id
    );

    // Revalidate –∫—ç—à
    revalidatePath("/admin/orders");

    return {
      success: true,
      data: {
        message: "–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π",
        purchase: updatedPurchase,
      },
    };
  } catch (error) {
    console.error("üí• [SERVER ACTION] Error marking purchase as sent:", error);

    return {
      success: false,
      error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞",
    };
  }
}

export async function _cancelPurchaseAction(
  session: JWTSession,
  purchaseId: number,
  adminNotes?: string
) {
  try {
    console.log("üöÄ [SERVER ACTION] Cancelling purchase:", purchaseId);

    const cancelledPurchase = await dbCancelPurchase(purchaseId, adminNotes);

    console.log("‚úÖ [SERVER ACTION] Purchase cancelled:", cancelledPurchase.id);

    // Revalidate –∫—ç—à
    revalidatePath("/admin/orders");

    return {
      success: true,
      data: {
        message: "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã",
        purchase: cancelledPurchase,
      },
    };
  } catch (error) {
    console.error("üí• [SERVER ACTION] Error cancelling purchase:", error);

    return {
      success: false,
      error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞",
    };
  }
}

export const markPurchaseAsSent = withServerAuth(_markPurchaseAsSentAction, {
  requireRole: "ADMIN",
});

export const cancelPurchase = withServerAuth(_cancelPurchaseAction, {
  requireRole: "ADMIN",
});
