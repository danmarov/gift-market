// lib/actions/bot.ts
"use server";

// ===== –¢–ò–ü–´ =====

export interface InlineKeyboardButton {
  text: string;
  url?: string;
  callback_data?: string;
  web_app?: { url: string };
}

export interface InlineKeyboardMarkup {
  inline_keyboard: InlineKeyboardButton[][];
}

export interface NotifyAdminOptions {
  message: string;
  parseMode?: "HTML" | "Markdown";
  keyboard?: InlineKeyboardMarkup | "webapp" | "none";
  webappUrl?: string;
  webappButtonText?: string;
}

// ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

// ===== –¢–ò–ü–´ –î–õ–Ø SENDGIFT =====

export interface SendGiftOptions {
  /** –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ */
  userId?: string;
  /** –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤) */
  chatId?: string;
  /** –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–∞ */
  giftId: string;
  /** –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–∞—Ä–∫–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  text?: string;
  /** –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (HTML –∏–ª–∏ Markdown) */
  parseMode?: "HTML" | "Markdown";
}

// ===== –§–£–ù–ö–¶–ò–Ø SENDGIFT =====

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∫–∞–Ω–∞–ª—É
 * @param options –û–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞
 * @returns Promise<boolean> - true –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
 */
export async function sendGift(options: SendGiftOptions): Promise<boolean> {
  const token = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
  if (!token) {
    console.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω");
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω –ª–∏–±–æ userId, –ª–∏–±–æ chatId
  if (!options.userId && !options.chatId) {
    console.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId –∏–ª–∏ chatId –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞");
    return false;
  }

  if (!options.giftId) {
    console.error("giftId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞");
    return false;
  }

  console.log("üéÅ [BOT] Sending gift:", {
    userId: options.userId || undefined,
    chatId: options.chatId || undefined,
    giftId: options.giftId,
    hasText: !!options.text,
    parseMode: options.parseMode,
  });

  try {
    const payload: any = {
      gift_id: options.giftId,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if (options.userId) {
      payload.user_id = options.userId;
    } else if (options.chatId) {
      payload.chat_id = options.chatId;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (options.text) {
      payload.text = options.text;
    }

    if (options.parseMode) {
      payload.text_parse_mode = options.parseMode;
    }

    const response = await fetch(
      `https://api.telegram.org/bot${token}/sendGift`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      }
    );

    console.log(
      "üì° [BOT] sendGift response status:",
      response.status,
      response.statusText
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå [BOT] Telegram API HTTP error:", {
        status: response.status,
        statusText: response.statusText,
        body: errorText,
        giftId: options.giftId,
      });
      return false;
    }

    const result = await response.json();

    if (!result.ok) {
      console.error("‚ùå [BOT] Telegram API result error:", {
        error_code: result.error_code,
        description: result.description,
        giftId: options.giftId,
      });
      return false;
    }

    console.log("‚úÖ [BOT] Gift sent successfully:", {
      giftId: options.giftId,
      recipient: options.userId || options.chatId,
    });

    return true;
  } catch (error) {
    console.error("üí• [BOT] Error sending gift:", error);
    return false;
  }
}

// ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–î–ê–†–ö–ê–ú–ò =====

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
 * @returns Promise<any> - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export async function getAvailableGifts(): Promise<any> {
  const token = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
  if (!token) {
    console.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω");
    return null;
  }

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${token}/getAvailableGifts`
    );

    if (!response.ok) {
      console.error("Failed to get available gifts:", response.statusText);
      return null;
    }

    const result = await response.json();

    if (!result.ok) {
      console.error("Telegram API error:", result.description);
      return null;
    }

    return result.result;
  } catch (error) {
    console.error("Error getting available gifts:", error);
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
 */
export async function isUserMemberOfChannel(
  userId: string,
  chatId: string
): Promise<boolean> {
  const token = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
  if (!token) throw new Error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω");

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chatId
  let normalizedChatId = chatId;

  // –ï—Å–ª–∏ —ç—Ç–æ username –∫–∞–Ω–∞–ª–∞ (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @ –∏ –Ω–µ —á–∏—Å–ª–æ–≤–æ–π ID)
  if (
    !chatId.startsWith("@") &&
    !chatId.startsWith("-") &&
    isNaN(Number(chatId))
  ) {
    normalizedChatId = `@${chatId}`;
  }

  console.log("üîç [BOT] Checking membership:", {
    originalChatId: chatId,
    normalizedChatId,
    userId,
    tokenExists: !!token,
  });

  try {
    const url = `https://api.telegram.org/bot${token}/getChatMember?chat_id=${normalizedChatId}&user_id=${userId}`;

    console.log(
      "üìû [BOT] Making request to:",
      url.replace(token, "***TOKEN***")
    );

    const response = await fetch(url);

    console.log(
      "üì° [BOT] Response status:",
      response.status,
      response.statusText
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå [BOT] Telegram API HTTP error:", {
        status: response.status,
        statusText: response.statusText,
        body: errorText,
        originalChatId: chatId,
        normalizedChatId,
      });
      return false;
    }

    const result = await response.json();

    if (!result.ok) {
      console.error("‚ùå [BOT] Telegram API result error:", {
        error_code: result.error_code,
        description: result.description,
        originalChatId: chatId,
        normalizedChatId,
        userId,
      });
      return false;
    }

    const status = result?.result?.status;
    const isSubscribed = ["member", "creator", "administrator"].includes(
      status
    );

    console.log("‚úÖ [BOT] Membership check result:", {
      originalChatId: chatId,
      normalizedChatId,
      userId,
      status,
      isSubscribed,
    });

    return isSubscribed;
  } catch (error) {
    console.error("üí• [BOT] Error checking channel membership:", error);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
 */
export async function notifyAdmin(
  options: NotifyAdminOptions
): Promise<boolean> {
  const token = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
  const adminId = process.env.ADMIN_TELEGRAM_ID;

  if (!token) {
    console.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω");
    return false;
  }

  if (!adminId) {
    console.error("ADMIN_TELEGRAM_ID –Ω–µ –∑–∞–¥–∞–Ω");
    return false;
  }

  try {
    const keyboard = createKeyboard(options);

    const payload: any = {
      chat_id: adminId,
      text: options.message,
      parse_mode: options.parseMode || "HTML",
    };

    if (keyboard) {
      payload.reply_markup = keyboard;
    }

    const response = await fetch(
      `https://api.telegram.org/bot${token}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      }
    );

    const result = await response.json();

    if (!result.ok) {
      console.error("Failed to send admin notification:", result);
      return false;
    }

    console.log("‚úÖ Admin notification sent successfully");
    return true;
  } catch (error) {
    console.error("Error sending admin notification:", error);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export async function sendMessageToUser(
  userId: string,
  message: string,
  options?: {
    parseMode?: "HTML" | "Markdown";
    keyboard?: InlineKeyboardMarkup;
  }
): Promise<boolean> {
  const token = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
  if (!token) {
    console.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω");
    return false;
  }

  try {
    const payload: any = {
      chat_id: userId,
      text: message,
      parse_mode: options?.parseMode || "HTML",
    };

    if (options?.keyboard) {
      payload.reply_markup = options.keyboard;
    }

    const response = await fetch(
      `https://api.telegram.org/bot${token}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      }
    );

    const result = await response.json();

    if (!result.ok) {
      console.error("Failed to send message to user:", result);
      return false;
    }

    return true;
  } catch (error) {
    console.error("Error sending message to user:", error);
    return false;
  }
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ü–∏–π
 */
function createKeyboard(
  options: NotifyAdminOptions
): InlineKeyboardMarkup | null {
  if (!options.keyboard || options.keyboard === "none") {
    return null;
  }

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  if (typeof options.keyboard === "object") {
    return options.keyboard;
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è webapp
  if (options.keyboard === "webapp") {
    const webappUrl = options.webappUrl || process.env.NEXT_PUBLIC_APP_URL;
    const buttonText = options.webappButtonText || "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ";

    if (!webappUrl) {
      console.warn("webappUrl –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è webapp –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");
      return null;
    }

    return {
      inline_keyboard: [
        [
          {
            text: buttonText,
            web_app: { url: webappUrl },
          },
        ],
      ],
    };
  }

  return null;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
 */
export async function createInlineKeyboard(
  buttons: InlineKeyboardButton[][]
): Promise<InlineKeyboardMarkup> {
  return {
    inline_keyboard: buttons,
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è webapp
 */
export async function createWebAppButton(
  text: string,
  url: string
): Promise<InlineKeyboardButton> {
  return {
    text,
    web_app: { url },
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å URL
 */
export async function createUrlButton(
  text: string,
  url: string
): Promise<InlineKeyboardButton> {
  return {
    text,
    url,
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å callback data
 */
export async function createCallbackButton(
  text: string,
  callbackData: string
): Promise<InlineKeyboardButton> {
  return {
    text,
    callback_data: callbackData,
  };
}
