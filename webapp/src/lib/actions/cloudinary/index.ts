// lib/utils/cloudinary.ts
import { v2 as cloudinary } from "cloudinary";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

export interface UploadResult {
  url: string;
  publicId: string;
  secureUrl: string;
  width?: number;
  height?: number;
  format: string;
  resourceType: string;
  bytes: number;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Cloudinary
 */
export async function uploadToCloudinary(
  file: File,
  folder: string = "demo-prizes"
): Promise<UploadResult> {
  try {
    console.log("‚òÅÔ∏è [CLOUDINARY] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞:", {
      name: file.name,
      size: file.size,
      type: file.type,
      folder,
    });

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º File –≤ Buffer
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞
    let resourceType: "image" | "video" | "raw" = "image";

    if (file.type.startsWith("video/")) {
      resourceType = "video";
    } else if (file.name.endsWith(".tgs")) {
      // TGS —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ raw, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram
      resourceType = "raw";
    }

    console.log("üìÇ [CLOUDINARY] –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞:", resourceType);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary
    const uploadResult = await new Promise((resolve, reject) => {
      cloudinary.uploader
        .upload_stream(
          {
            folder: folder,
            resource_type: resourceType,
            public_id: `${Date.now()}-${file.name.replace(/\.[^/.]+$/, "")}`, // —É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            overwrite: true,
            // –î–ª—è –≤–∏–¥–µ–æ –≤–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            ...(resourceType === "video" && {
              eager: [{ quality: "auto", fetch_format: "auto" }],
            }),
          },
          (error, result) => {
            if (error) {
              console.error("‚ùå [CLOUDINARY] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
              reject(error);
            } else {
              console.log("‚úÖ [CLOUDINARY] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:", {
                url: result?.secure_url,
                publicId: result?.public_id,
                format: result?.format,
                bytes: result?.bytes,
              });
              resolve(result);
            }
          }
        )
        .end(buffer);
    });

    const result = uploadResult as any;

    return {
      url: result.secure_url,
      publicId: result.public_id,
      secureUrl: result.secure_url,
      width: result.width,
      height: result.height,
      format: result.format,
      resourceType: result.resource_type,
      bytes: result.bytes,
    };
  } catch (error) {
    console.error("üí• [CLOUDINARY] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    throw new Error(
      `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Cloudinary: ${
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
      }`
    );
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ Cloudinary
 */
export async function deleteFromCloudinary(publicId: string): Promise<boolean> {
  try {
    console.log("üóëÔ∏è [CLOUDINARY] –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª:", publicId);

    const result = await cloudinary.uploader.destroy(publicId);

    if (result.result === "ok") {
      console.log("‚úÖ [CLOUDINARY] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
      return true;
    } else {
      console.warn("‚ö†Ô∏è [CLOUDINARY] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω");
      return false;
    }
  } catch (error) {
    console.error("‚ùå [CLOUDINARY] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
    throw new Error(
      `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Cloudinary: ${
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
      }`
    );
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Cloudinary
 */
export function validateCloudinaryConfig(): boolean {
  const requiredVars = [
    "CLOUDINARY_CLOUD_NAME",
    "CLOUDINARY_API_KEY",
    "CLOUDINARY_API_SECRET",
  ];

  for (const variable of requiredVars) {
    if (!process.env[variable]) {
      console.error(
        `‚ùå [CLOUDINARY] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${variable}`
      );
      return false;
    }
  }

  console.log("‚úÖ [CLOUDINARY] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
  return true;
}
