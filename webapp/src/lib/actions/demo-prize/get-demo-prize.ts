// actions/get-demo-prize.ts
"use server";
import { findDemoPrizeById, getActiveDemoPrizes } from "database";
import { withServerAuth } from "../auth/with-server-auth";
import { JWTSession } from "@/lib/types/session";

export type GetDemoPrizeResult =
  | { success: true; data: DemoPrize }
  | { success: false; error: string };

export interface DemoPrize {
  id: number;
  name: string;
  description: string | null;
  mediaUrl: string;
  cloudinaryPublicId: string | null;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export async function _getDemoPrize(
  session: JWTSession,
  prizeId: number | "random"
): Promise<GetDemoPrizeResult> {
  console.log(`üéÅ [SERVER ACTION] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ-–ø—Ä–∏–∑–∞ —Å ID: ${prizeId}`);

  try {
    let demoPrize;

    if (prizeId === "random") {
      console.log(
        `üé≤ [SERVER ACTION] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–º–æ-–ø—Ä–∏–∑–∞`
      );

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–º–æ-–ø—Ä–∏–∑—ã
      const activePrizes = await getActiveDemoPrizes();

      if (activePrizes.length === 0) {
        console.log(`‚ùå [SERVER ACTION] –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–º–æ-–ø—Ä–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return {
          success: false,
          error: "–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–º–æ-–ø—Ä–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        };
      }

      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
      const randomIndex = Math.floor(Math.random() * activePrizes.length);
      demoPrize = activePrizes[randomIndex];

      console.log(
        `üé≤ [SERVER ACTION] –í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑: "${demoPrize.name}" (ID: ${demoPrize.id})`
      );
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–∑ –ø–æ ID
      demoPrize = await findDemoPrizeById(prizeId);

      if (!demoPrize) {
        console.log(`‚ùå [SERVER ACTION] –î–µ–º–æ-–ø—Ä–∏–∑ —Å ID ${prizeId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return {
          success: false,
          error: `–î–µ–º–æ-–ø—Ä–∏–∑ —Å ID ${prizeId} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω
      if (!demoPrize.isActive) {
        console.log(`‚ùå [SERVER ACTION] –î–µ–º–æ-–ø—Ä–∏–∑ —Å ID ${prizeId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
        return {
          success: false,
          error: `–î–µ–º–æ-–ø—Ä–∏–∑ —Å ID ${prizeId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`,
        };
      }
    }

    console.log(
      `‚úÖ [SERVER ACTION] –î–µ–º–æ-–ø—Ä–∏–∑ –Ω–∞–π–¥–µ–Ω: "${demoPrize.name}" (ID: ${demoPrize.id})`
    );

    return {
      success: true,
      data: demoPrize,
    };
  } catch (error) {
    console.error("‚ùå [SERVER ACTION] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ-–ø—Ä–∏–∑–∞:", error);

    return {
      success: false,
      error:
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    };
  }
}

export const getDemoPrize = withServerAuth(_getDemoPrize);
