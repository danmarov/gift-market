"use server";
import {
  getActiveLootBoxTasks,
  updateUserOnboardingStatus,
  getUserUnclaimedDraws,
  claimLootBoxPrize,
  findUserById,
  UserOnboardingStatus,
  getUserValidatedReferralsCount,
} from "database";
import { JWTSession } from "@/lib/types/session";
import { withServerAuth } from "../auth/with-server-auth";
import { isUserMemberOfChannel } from "../bot";
import { revalidatePath } from "next/cache";

export type ClaimGiftResult =
  | {
      success: true;
      message: string;
    }
  | {
      success: false;
      error: string;
      missingSubscriptions?: string[];
    };

async function _claimGift(session: JWTSession): Promise<ClaimGiftResult> {
  try {
    console.log("üéÅ [SERVER] Claiming gift for user:", session.id);

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const user = await findUserById(session.id);

    if (!user) {
      return { success: false, error: "User not found" };
    }

    console.log("üë§ [SERVER] User onboarding status:", user.onboardingStatus);

    // –ü–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å GIFT_REVEALED –∏–ª–∏ CHANNELS_COMPLETED
    if (
      user.onboardingStatus !== UserOnboardingStatus.GIFT_REVEALED &&
      user.onboardingStatus !== UserOnboardingStatus.CHANNELS_COMPLETED
    ) {
      return {
        success: false,
        error: `Gift is not available for claiming. Current status: ${user.onboardingStatus}`,
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const validatedReferrals = await getUserValidatedReferralsCount(session.id);
    console.log(
      `üìä [SERVER] User has ${validatedReferrals} validated referrals`
    );

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const tasks = await getActiveLootBoxTasks();
    console.log(`üìã [SERVER] Found ${tasks.length} active tasks`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    let allSubscriptionsMet = true;
    const missingSubscriptions: string[] = [];

    if (tasks.length > 0) {
      console.log(
        "üìã [SERVER] Checking subscriptions for",
        tasks.length,
        "tasks"
      );

      for (const task of tasks) {
        try {
          const isMember = await isUserMemberOfChannel(
            session.telegramId.toString(),
            task.channelId
          );

          if (!isMember) {
            console.log(`‚ùå [SERVER] User not subscribed to ${task.title}`);
            missingSubscriptions.push(task.title);
            allSubscriptionsMet = false;
          } else {
            console.log(`‚úÖ [SERVER] User subscribed to ${task.title}`);
          }
        } catch (error) {
          console.error(
            `‚ùå [SERVER] Error checking subscription for ${task.channelId}:`,
            error
          );
          missingSubscriptions.push(task.title);
          allSubscriptionsMet = false;
        }
      }
    } else {
      console.log(
        "‚úÖ [SERVER] No tasks required - subscription conditions met automatically"
      );
    }

    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –º–µ–Ω—å—à–µ 2
    if (allSubscriptionsMet && validatedReferrals < 2) {
      console.log(
        `‚ùå [SERVER] Not enough validated referrals: ${validatedReferrals}/2`
      );
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ CHANNELS_COMPLETED —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      if (user.onboardingStatus !== UserOnboardingStatus.CHANNELS_COMPLETED) {
        await updateUserOnboardingStatus(
          session.id,
          UserOnboardingStatus.CHANNELS_COMPLETED
        );
      }
      return {
        success: false,
        error: `–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 2 –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞`,
      };
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    if (!allSubscriptionsMet) {
      console.log("‚ùå [SERVER] Missing subscriptions:", missingSubscriptions);
      return {
        success: false,
        error: `–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã`,
        missingSubscriptions,
      };
    }

    const unclaimedDraws = await getUserUnclaimedDraws(session.id);

    if (unclaimedDraws.length === 0) {
      return { success: false, error: "No unclaimed gifts found" };
    }

    const currentDraw = unclaimedDraws[0];
    const claimedDraw = await claimLootBoxPrize(currentDraw.id);

    await updateUserOnboardingStatus(
      session.id,
      UserOnboardingStatus.ALL_COMPLETED
    );

    console.log(
      "üéâ [SERVER] All conditions met, setting status to ALL_COMPLETED for animation!"
    );

    const gift = claimedDraw.prize.gift;
    revalidatePath("/onboarding");
    return {
      success: true,
      message: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ "${gift.name}"! –ù–∞–∂–º–∏—Ç–µ "–ó–∞–±—Ä–∞—Ç—å", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.`,
    };
  } catch (error) {
    console.error("üí• [SERVER] Error claiming gift:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Failed to claim gift",
    };
  }
}

export const claimGift = withServerAuth(_claimGift);
