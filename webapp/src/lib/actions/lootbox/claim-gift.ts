"use server";
import {
  getActiveLootBoxTasks,
  updateUserOnboardingStatus,
  getUserUnclaimedDraws,
  claimLootBoxPrize,
  findUserById,
  UserOnboardingStatus,
  createPurchase as createPurchaseDb,
  markPurchaseAsSent,
  processReferralOnboardingReward,
} from "database";
import { JWTSession } from "@/lib/types/session";
import { withServerAuth } from "../auth/with-server-auth";
import {
  isUserMemberOfChannel,
  notifyAdmin,
  sendGift,
  sendMessageToUser,
} from "../bot";

export type ClaimGiftResult =
  | {
      success: true;
      message: string;
    }
  | {
      success: false;
      error: string;
      missingSubscriptions?: string[];
    };

async function _claimGift(session: JWTSession): Promise<ClaimGiftResult> {
  try {
    console.log("üéÅ [SERVER] Claiming gift for user:", session.id);

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const user = await findUserById(session.id);

    if (!user) {
      return { success: false, error: "User not found" };
    }

    console.log("üë§ [SERVER] User onboarding status:", user.onboardingStatus);

    // –ü–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–∏–≥—Ä–∞–Ω
    if (user.onboardingStatus !== UserOnboardingStatus.GIFT_REVEALED) {
      return {
        success: false,
        error: `Gift is not available for claiming. Current status: ${user.onboardingStatus}`,
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–±—Ä–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const unclaimedDraws = await getUserUnclaimedDraws(session.id);

    if (unclaimedDraws.length === 0) {
      return { success: false, error: "No unclaimed gifts found" };
    }

    const currentDraw = unclaimedDraws[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–±—Ä–∞–Ω–Ω—ã–π

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const tasks = await getActiveLootBoxTasks();

    console.log(`üìã [SERVER] Found ${tasks.length} active tasks`);

    // –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É—Å–ª–æ–≤–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    if (tasks.length === 0) {
      console.log(
        "‚úÖ [SERVER] No tasks required - onboarding conditions met automatically"
      );
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–∞—à –º–æ–¥—É–ª—å bot.ts
      const missingSubscriptions: string[] = [];

      console.log(
        "üìã [SERVER] Checking subscriptions for",
        tasks.length,
        "tasks"
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É
      for (const task of tasks) {
        try {
          const isMember = await isUserMemberOfChannel(
            session.telegramId.toString(),
            task.channelId
          );

          if (!isMember) {
            console.log(`‚ùå [SERVER] User not subscribed to ${task.title}`);
            missingSubscriptions.push(task.title);
          } else {
            console.log(`‚úÖ [SERVER] User subscribed to ${task.title}`);
          }
        } catch (error) {
          console.error(
            `‚ùå [SERVER] Error checking subscription for ${task.channelId}:`,
            error
          );
          missingSubscriptions.push(task.title);
        }
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      if (missingSubscriptions.length > 0) {
        console.log("‚ùå [SERVER] Missing subscriptions:", missingSubscriptions);
        return {
          success: false,
          error: `Please subscribe to all channels first`,
          missingSubscriptions,
        };
      }

      console.log("‚úÖ [SERVER] All subscriptions verified!");
    }

    // –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –∑–∞–±–∏—Ä–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫!
    const claimedDraw = await claimLootBoxPrize(currentDraw.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: GIFT_REVEALED -> COMPLETED
    await updateUserOnboardingStatus(
      session.id,
      UserOnboardingStatus.COMPLETED
    );

    console.log(
      "üéâ [SERVER] Gift successfully claimed and onboarding completed!"
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    try {
      const referralReward = await processReferralOnboardingReward(
        session.id,
        5,
        5
      );

      if (referralReward) {
        console.log("üí∞ [SERVER] Referral rewards processed successfully!");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        const rewardStars = 5;
        const notificationText = `<b>üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ <b>${rewardStars} ‚≠ê</b>.`;

        try {
          await sendMessageToUser(
            referralReward.referrer.telegramId,
            notificationText,
            {
              parseMode: "HTML",
            }
          );
        } catch (notificationError) {
          console.error(
            "‚ùå [SERVER] Failed to send referral notification:",
            notificationError
          );
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await notifyAdmin({
          message: `
üéâ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!</b>

üë• –†–µ—Ñ–µ—Ä–µ—Ä: ${referralReward.referrer.telegramId}
üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${referralReward.referred.telegramId}
üí∞ –ù–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã: ${rewardStars}‚≠ê –∫–∞–∂–¥–æ–º—É
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

‚úÖ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω
          `,
          keyboard: "webapp",
          webappButtonText: "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
          webappUrl: `${process.env.WEBAPP_URL}/admin/referrals`,
        });
      } else {
        console.log("‚ÑπÔ∏è [SERVER] No pending referral found for this user");
      }
    } catch (referralError) {
      console.error(
        "‚ùå [SERVER] Error processing referral reward:",
        referralError
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ "–ø–æ–∫—É–ø–∫–µ" (–±–µ—Å–ø–ª–∞—Ç–Ω–æ–π)
    const purchase = await createPurchaseDb({
      buyerId: session.id,
      giftId: claimedDraw.prize.gift.id,
      quantity: 1,
      totalPrice: 0,
      pricePerItem: 0,
    });

    const gift = claimedDraw.prize.gift;

    console.log("üéÅ Purchase created for claimed gift:", {
      id: purchase.id,
      hasTelegramGiftId: !!(
        gift.telegramGiftId && gift.telegramGiftId.trim() !== ""
      ),
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (gift.telegramGiftId && gift.telegramGiftId.trim() !== "") {
      console.log("ü§ñ Attempting automatic gift delivery for claimed gift...");

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ Telegram API
        const giftSent = await sendGift({
          userId: session.telegramId,
          giftId: gift.telegramGiftId,
          text: ``,
          parseMode: "HTML",
        });

        if (!giftSent) {
          throw new Error("Failed to send claimed gift");
        }

        // –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ SENT
        await markPurchaseAsSent(
          purchase.id,
          undefined, // telegramMessageId –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö
          `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ Telegram API`
        );

        console.log("‚úÖ Automatic delivery of claimed gift successful!");

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await notifyAdmin({
          message: `
üéâ <b>–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (–≤—ã–∏–≥—Ä–∞–Ω)
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
ü§ñ –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
          `,
          keyboard: "webapp",
          webappButtonText: "üìà –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
          webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
        });

        return {
          success: true,
          message: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–¥–∞—Ä–æ–∫ "${gift.name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ Telegram!`,
        };
      } catch (autoError: any) {
        console.error(
          "‚ùå Automatic delivery of claimed gift failed:",
          autoError
        );

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorMessage = autoError?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        await notifyAdmin({
          message: `
‚ö†Ô∏è <b>–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (–≤—ã–∏–≥—Ä–∞–Ω)
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${errorMessage}
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
          `,
          keyboard: "webapp",
          webappButtonText: "üì¶ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑",
          webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
        });

        return {
          success: true,
          message: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ "${gift.name}"! –ü–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`,
        };
      }
    } else {
      // –≠—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
      console.log(
        "üì¶ Manual delivery required for claimed gift (no telegramGiftId)"
      );

      await notifyAdmin({
        message: `
üéâ <b>–ù–æ–≤—ã–π –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (—Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (–≤—ã–∏–≥—Ä–∞–Ω)
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        `,
        keyboard: "webapp",
        webappButtonText: "üì¶ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑",
        webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
      });

      return {
        success: true,
        message: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ "${gift.name}"! –ü–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`,
      };
    }
  } catch (error) {
    console.error("üí• [SERVER] Error claiming gift:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Failed to claim gift",
    };
  }
}

export const claimGift = withServerAuth(_claimGift);
