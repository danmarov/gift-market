"use server";
import {
  getActiveLootBoxTasks,
  updateUserOnboardingStatus,
  getUserUnclaimedDraws,
  claimLootBoxPrize,
  findUserById,
  UserOnboardingStatus,
  createPurchase as createPurchaseDb,
} from "database";
import { JWTSession } from "@/lib/types/session";
import { withServerAuth } from "../auth/with-server-auth";
import { isUserMemberOfChannel, notifyAdmin } from "../bot";

export type ClaimGiftResult =
  | {
      success: true;
      message: string;
    }
  | {
      success: false;
      error: string;
      missingSubscriptions?: string[];
    };

async function _claimGift(session: JWTSession): Promise<ClaimGiftResult> {
  try {
    console.log("üéÅ [SERVER] Claiming gift for user:", session.id);

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const user = await findUserById(session.id);

    if (!user) {
      return { success: false, error: "User not found" };
    }

    console.log("üë§ [SERVER] User onboarding status:", user.onboardingStatus);

    // –ü–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–∏–≥—Ä–∞–Ω
    if (user.onboardingStatus !== UserOnboardingStatus.GIFT_REVEALED) {
      return {
        success: false,
        error: `Gift is not available for claiming. Current status: ${user.onboardingStatus}`,
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–±—Ä–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const unclaimedDraws = await getUserUnclaimedDraws(session.id);

    if (unclaimedDraws.length === 0) {
      return { success: false, error: "No unclaimed gifts found" };
    }

    const currentDraw = unclaimedDraws[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–±—Ä–∞–Ω–Ω—ã–π

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const tasks = await getActiveLootBoxTasks();

    if (tasks.length === 0) {
      return { success: false, error: "No active tasks found" };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–∞—à –º–æ–¥—É–ª—å bot.ts
    const missingSubscriptions: string[] = [];

    console.log(
      "üìã [SERVER] Checking subscriptions for",
      tasks.length,
      "tasks"
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É
    for (const task of tasks) {
      try {
        const isMember = await isUserMemberOfChannel(
          session.telegramId.toString(),
          task.channelId
        );

        if (!isMember) {
          console.log(`‚ùå [SERVER] User not subscribed to ${task.title}`);
          missingSubscriptions.push(task.title);
        } else {
          console.log(`‚úÖ [SERVER] User subscribed to ${task.title}`);
        }
      } catch (error) {
        console.error(
          `‚ùå [SERVER] Error checking subscription for ${task.channelId}:`,
          error
        );
        missingSubscriptions.push(task.title);
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if (missingSubscriptions.length > 0) {
      console.log("‚ùå [SERVER] Missing subscriptions:", missingSubscriptions);
      return {
        success: false,
        error: `Please subscribe to all channels first`,
        missingSubscriptions,
      };
    }

    console.log("‚úÖ [SERVER] All subscriptions verified!");

    // –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –∑–∞–±–∏—Ä–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫!
    const claimedDraw = await claimLootBoxPrize(currentDraw.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: GIFT_REVEALED -> COMPLETED
    await updateUserOnboardingStatus(
      session.id,
      UserOnboardingStatus.COMPLETED
    );

    console.log(
      "üéâ [SERVER] Gift successfully claimed and onboarding completed!"
    );

    await createPurchaseDb({
      buyerId: session.id,
      giftId: claimedDraw.prize.gift.id,
      quantity: 1,
      totalPrice: 0,
      pricePerItem: 0,
    });
    await notifyAdmin({
      message: `
üéâ <b>–ù–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à –ø–æ–¥–∞—Ä–∫–∞!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${claimedDraw.prize.gift.name} (x${1})
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
  `,
      keyboard: "webapp",
      webappButtonText: "üìà –û—Ç–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞",
      webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
    });
    return {
      success: true,
      message: `Congratulations! You have successfully claimed: ${claimedDraw.prize.gift.name}`,
    };
  } catch (error) {
    console.error("üí• [SERVER] Error claiming gift:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Failed to claim gift",
    };
  }
}

export const claimGift = withServerAuth(_claimGift);
