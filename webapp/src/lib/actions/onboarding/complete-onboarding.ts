"use server";
import {
  updateUserOnboardingStatus,
  UserOnboardingStatus,
  findUserById,
  getUserUnclaimedDraws,
  claimLootBoxPrize,
  createPurchase as createPurchaseDb,
  markPurchaseAsSent,
} from "database";
import { JWTSession } from "@/lib/types/session";
import { withServerAuth } from "../auth/with-server-auth";
import { sendGift, notifyAdmin } from "../bot";

export type CompleteOnboardingResult =
  | { success: true; message: string }
  | { success: false; error: string };

async function _completeOnboarding(
  session: JWTSession
): Promise<CompleteOnboardingResult> {
  try {
    console.log("üèÅ [SERVER] Completing onboarding for user:", session.id);

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await findUserById(session.id);

    if (!user) {
      return { success: false, error: "User not found" };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (user.onboardingStatus !== UserOnboardingStatus.ALL_COMPLETED) {
      return {
        success: false,
        error: `Cannot complete onboarding. Current status: ${user.onboardingStatus}`,
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–±—Ä–∞–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏
    const unclaimedDraws = await getUserUnclaimedDraws(session.id);
    if (unclaimedDraws.length === 0) {
      return { success: false, error: "No unclaimed gifts found" };
    }

    const currentDraw = unclaimedDraws[0];
    const claimedDraw = await claimLootBoxPrize(currentDraw.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ COMPLETED
    await updateUserOnboardingStatus(
      session.id,
      UserOnboardingStatus.COMPLETED
    );

    console.log("üéâ [SERVER] Onboarding completed, status set to COMPLETED!");

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ "–ø–æ–∫—É–ø–∫–µ" (–±–µ—Å–ø–ª–∞—Ç–Ω–æ–π)
    const purchase = await createPurchaseDb({
      buyerId: session.id,
      giftId: claimedDraw.prize.gift.id,
      quantity: 1,
      totalPrice: 0,
      pricePerItem: 0,
    });

    const gift = claimedDraw.prize.gift;

    console.log("üéÅ Purchase created for claimed gift:", {
      id: purchase.id,
      hasTelegramGiftId: !!(
        gift.telegramGiftId && gift.telegramGiftId.trim() !== ""
      ),
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (gift.telegramGiftId && gift.telegramGiftId.trim() !== "") {
      console.log("ü§ñ Attempting automatic gift delivery...");

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ Telegram API
        const giftSent = await sendGift({
          userId: session.telegramId,
          giftId: gift.telegramGiftId,
          text: ``,
          parseMode: "HTML",
        });

        if (!giftSent) {
          throw new Error("Failed to send claimed gift");
        }

        // –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ SENT
        await markPurchaseAsSent(
          purchase.id,
          undefined, // telegramMessageId –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö
          `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ Telegram API`
        );

        console.log("‚úÖ Automatic delivery successful!");

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await notifyAdmin({
          message: `
üéâ <b>–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (–≤—ã–∏–≥—Ä–∞–Ω)
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
ü§ñ –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
          `,
          keyboard: "webapp",
          webappButtonText: "üìà –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
          webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
        });

        return {
          success: true,
          message: `üéâ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –≤ –ø—É—Ç–∏`,
        };
      } catch (autoError: any) {
        console.error("‚ùå Automatic delivery failed:", autoError);

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorMessage = autoError?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        await notifyAdmin({
          message: `
‚ö†Ô∏è <b>–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (–≤—ã–∏–≥—Ä–∞–Ω)
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${errorMessage}
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
          `,
          keyboard: "webapp",
          webappButtonText: "üì¶ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑",
          webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
        });

        return {
          success: true,
          message: `üéâ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –≤ –ø—É—Ç–∏`,
        };
      }
    } else {
      // –≠—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
      console.log("üì¶ Manual delivery required (no telegramGiftId)");

      await notifyAdmin({
        message: `
üéâ <b>–ù–æ–≤—ã–π –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (—Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (–≤—ã–∏–≥—Ä–∞–Ω)
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        `,
        keyboard: "webapp",
        webappButtonText: "üì¶ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑",
        webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
      });

      return {
        success: true,
        message: `üéâ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –≤ –ø—É—Ç–∏`,
      };
    }
  } catch (error) {
    console.error("üí• [SERVER] Error completing onboarding:", error);
    return {
      success: false,
      error:
        error instanceof Error
          ? error.message
          : "Failed to complete onboarding",
    };
  }
}

export const completeOnboarding = withServerAuth(_completeOnboarding);
