// lib/actions/purchases/create-purchase.ts
import {
  createPurchase as createPurchaseDb,
  findGiftById,
  markPurchaseAsSent,
} from "database";
import { JWTSession } from "@/lib/types/session";
import { withServerAuth } from "../auth/with-server-auth";
import { notifyAdmin, sendGift } from "../bot";

export interface CreatePurchaseParams {
  giftId: string;
  quantity: number;
}

export type CreatePurchaseResult =
  | { success: true; data: { id: number; message: string; auto: boolean } }
  | { success: false; error: string };

async function _createPurchase(
  session: JWTSession,
  params: CreatePurchaseParams
): Promise<CreatePurchaseResult> {
  try {
    const { giftId, quantity } = params;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!giftId || typeof giftId !== "string" || giftId.trim() === "") {
      return { success: false, error: "Invalid gift ID" };
    }

    if (!quantity || quantity < 1 || quantity > 100) {
      return { success: false, error: "Quantity must be between 1 and 100" };
    }

    if (!Number.isInteger(quantity)) {
      return { success: false, error: "Quantity must be a whole number" };
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
    const gift = await findGiftById(giftId);
    if (!gift) {
      return { success: false, error: "Gift not found" };
    }

    if (gift.quantity < quantity) {
      return { success: false, error: "Not enough gifts in stock" };
    }

    const totalPrice = gift.price * quantity;

    // –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ –ë–î (–ø–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING)
    const purchase = await createPurchaseDb({
      buyerId: session.id,
      giftId,
      quantity,
      totalPrice,
      pricePerItem: gift.price,
    });

    console.log("üéÅ Purchase created:", {
      id: purchase.id,
      hasTelegramGiftId: !!(
        gift.telegramGiftId && gift.telegramGiftId.trim() !== ""
      ),
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (gift.telegramGiftId && gift.telegramGiftId.trim() !== "") {
      console.log("ü§ñ Attempting automatic gift delivery...");

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ Telegram API
        for (let i = 0; i < quantity; i++) {
          const giftSent = await sendGift({
            userId: session.telegramId,
            giftId: gift.telegramGiftId,
            text: ``,
            parseMode: "HTML",
          });

          if (!giftSent) {
            throw new Error(`Failed to send gift ${i + 1} of ${quantity}`);
          }
        }

        // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ SENT
        await markPurchaseAsSent(
          purchase.id,
          undefined, // telegramMessageId –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö
          `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${quantity} –ø–æ–¥–∞—Ä–∫–æ–≤ —á–µ—Ä–µ–∑ Telegram API`
        );

        console.log("‚úÖ Automatic gift delivery successful!");

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await notifyAdmin({
          message: `
‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (x${quantity})
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice}‚≠ê
ü§ñ –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}
          `,
          keyboard: "webapp",
          webappButtonText: "üìà –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
          webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
        });

        return {
          success: true,
          data: {
            id: purchase.id,
            message: `üéâ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! –ó–∞–∫–∞–∑ #${purchase.id}`,
            auto: true,
          },
        };
      } catch (autoError: any) {
        console.error("‚ùå Automatic gift delivery failed:", autoError);

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorMessage = autoError?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await notifyAdmin({
          message: `
‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (x${quantity})
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice}‚≠ê
ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${errorMessage}
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
          `,
          keyboard: "webapp",
          webappButtonText: "üì¶ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑",
          webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
        });

        return {
          success: true,
          data: {
            id: purchase.id,
            message: `–ó–∞–∫–∞–∑ #${purchase.id} —Å–æ–∑–¥–∞–Ω! –ü–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.`,
            auto: false,
          },
        };
      }
    } else {
      // –≠—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
      console.log("üì¶ Manual delivery required (no telegramGiftId)");

      await notifyAdmin({
        message: `
üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (x${quantity})
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice}‚≠ê
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        `,
        keyboard: "webapp",
        webappButtonText: "üì¶ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑",
        webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
      });

      return {
        success: true,
        data: {
          id: purchase.id,
          message: `–ó–∞–∫–∞–∑ #${purchase.id} —Å–æ–∑–¥–∞–Ω! –ü–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`,
          auto: false,
        },
      };
    }
  } catch (error: any) {
    console.error("Error in _createPurchase:", error);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–∑ –ë–î
    if (error.message === "Gift not found") {
      return { success: false, error: "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" };
    }
    if (error.message === "Insufficient gift quantity") {
      return { success: false, error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏" };
    }
    if (error.message === "User not found") {
      return { success: false, error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" };
    }
    if (error.message === "Insufficient balance") {
      return { success: false, error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ" };
    }

    return { success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–∞" };
  }
}

export const createPurchase = withServerAuth(_createPurchase);
