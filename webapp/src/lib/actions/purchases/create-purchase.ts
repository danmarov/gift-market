// lib/actions/purchases/create-purchase.ts
import { createPurchase as createPurchaseDb, findGiftById } from "database";
import { JWTSession } from "@/lib/types/session";
import { withServerAuth } from "../auth/with-server-auth";
import { notifyAdmin } from "../bot";

export interface CreatePurchaseParams {
  giftId: string;
  quantity: number;
}

export type CreatePurchaseResult =
  | { success: true; data: { id: number; message: string } }
  | { success: false; error: string };

async function _createPurchase(
  session: JWTSession,
  params: CreatePurchaseParams
): Promise<CreatePurchaseResult> {
  try {
    const { giftId, quantity } = params;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!giftId || typeof giftId !== "string" || giftId.trim() === "") {
      return { success: false, error: "Invalid gift ID" };
    }

    if (!quantity || quantity < 1 || quantity > 100) {
      return { success: false, error: "Quantity must be between 1 and 100" };
    }

    if (!Number.isInteger(quantity)) {
      return { success: false, error: "Quantity must be a whole number" };
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
    const gift = await findGiftById(giftId);
    if (!gift) {
      return { success: false, error: "Gift not found" };
    }

    if (gift.quantity < quantity) {
      return { success: false, error: "Not enough gifts in stock" };
    }

    const totalPrice = gift.price * quantity;

    // –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ –ë–î
    const purchase = await createPurchaseDb({
      buyerId: session.id,
      giftId,
      quantity,
      totalPrice,
      pricePerItem: gift.price,
    });
    await notifyAdmin({
      message: `
üéâ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.telegramId}
üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (x${quantity})
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice}‚≠ê
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}
  `,
      keyboard: "webapp",
      webappButtonText: "üìà –û—Ç–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä–∞",
      webappUrl: `${process.env.WEBAPP_URL}/admin/orders`,
    });
    return {
      success: true,
      data: {
        id: purchase.id,
        message: `Order #${purchase.id} created successfully!`,
      },
    };
  } catch (error: any) {
    console.error("Error in _createPurchase:", error);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–∑ –ë–î
    if (error.message === "Gift not found") {
      return { success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–∞" };
    }
    if (error.message === "Insufficient gift quantity") {
      return { success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–∞" };
    }
    if (error.message === "User not found") {
      return { success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–∞" };
    }
    if (error.message === "Insufficient balance") {
      return { success: false, error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ" };
    }

    return { success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–∞" };
  }
}

export const createPurchase = withServerAuth(_createPurchase);
