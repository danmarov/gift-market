// lib/actions/task/check-task.ts
"use server";

import { completeTask as dbCompleteTask, findTaskById } from "database";
import { withServerAuth } from "../auth/with-server-auth";
import { JWTSession } from "@/lib/types/session";
import { isUserMemberOfChannel } from "../bot";

type TaskMetadata = {
  chatId: string;
  channelUrl?: string;
};

async function _checkTask(
  session: JWTSession,
  taskId: string
): Promise<{
  success: boolean;
  data?: any;
  error?: string;
  completed?: boolean;
}> {
  try {
    console.log(
      "üîß [SERVER] Checking task completion for user:",
      session.id,
      "task:",
      taskId
    );

    const task = await findTaskById(taskId);
    if (!task) {
      throw new Error("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    const metadata =
      typeof task.metadata === "string"
        ? (JSON.parse(task.metadata) as TaskMetadata)
        : (task.metadata as TaskMetadata);

    const chatId = metadata.chatId;
    const telegramUserId = session.telegramId;
    if (!chatId || !telegramUserId) {
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è");
    }

    const isSubscribed = await isUserMemberOfChannel(telegramUserId, chatId);
    if (isSubscribed) {
      // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ - –ø–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
      const userTask = await dbCompleteTask(session.id, taskId);

      console.log("‚úÖ [SERVER] Task completed successfully");

      return {
        success: true,
        completed: true,
        data: userTask,
      };
    } else {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      console.log("‚ùå [SERVER] User not subscribed");

      return {
        success: true,
        completed: false,
        error: "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª",
      };
    }
  } catch (error) {
    console.error("üí• [SERVER] Error checking task:", error);

    return {
      success: false,
      error:
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è",
    };
  }
}

export const checkTask = withServerAuth(_checkTask);
