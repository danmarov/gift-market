// lib/actions/task/check-task.ts
"use server";

import { completeTask as dbCompleteTask, findTaskById } from "database";
import { withServerAuth } from "../auth/with-server-auth";
import { JWTSession } from "@/lib/types/session";
import { isUserMemberOfChannel } from "../bot";
import { createCacheTag } from "@/lib/revalidation-keys";
import { revalidateTag } from "next/cache";

type TaskMetadata = {
  chatId: string;
  channelUrl?: string;
};

async function _checkTask(
  session: JWTSession,
  taskId: string
): Promise<{
  success: boolean;
  data?: any;
  error?: string;
  completed?: boolean;
}> {
  try {
    console.log(
      "üîß [SERVER] Checking task completion for user:",
      session.id,
      "task:",
      taskId
    );

    const task = await findTaskById(taskId);
    if (!task) {
      throw new Error("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    // üî• FREE_BONUS –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞–¥–∞—Ç—å –≤ check (–æ–Ω —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –≤ start)
    if (task.type === "FREE_BONUS") {
      console.log("üéÅ [SERVER] FREE_BONUS task - should already be completed");
      return {
        success: false,
        error: "FREE_BONUS –∑–∞–¥–∞—á–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
      };
    }

    // üî• –î–ª—è TELEGRAM_SUBSCRIPTION –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if (task.type === "TELEGRAM_SUBSCRIPTION") {
      const metadata =
        typeof task.metadata === "string"
          ? (JSON.parse(task.metadata) as TaskMetadata)
          : (task.metadata as TaskMetadata);

      const chatId = metadata.chatId;
      const telegramUserId = session.telegramId;

      if (!chatId || !telegramUserId) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è");
      }

      const isSubscribed = await isUserMemberOfChannel(telegramUserId, chatId);

      if (isSubscribed) {
        const userTask = await dbCompleteTask(session.id, taskId);

        console.log(
          "‚úÖ [SERVER] TELEGRAM_SUBSCRIPTION task completed successfully"
        );
        revalidateTag(createCacheTag.userTasks(session.id));
        return {
          success: true,
          completed: true,
          data: userTask,
        };
      } else {
        console.log("‚ùå [SERVER] User not subscribed to channel");

        return {
          success: true,
          completed: false,
          error: "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª",
        };
      }
    }

    // üî• –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
    console.log("‚ö†Ô∏è [SERVER] Unknown task type:", task.type);
    return {
      success: false,
      error: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è",
    };
  } catch (error) {
    console.error("üí• [SERVER] Error checking task:", error);

    return {
      success: false,
      error:
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è",
    };
  }
}

export const checkTask = withServerAuth(_checkTask);
