// lib/actions/task/claim-reward.ts
"use server";

import { claimTaskReward as dbClaimTaskReward, findTaskById } from "database";
import { withServerAuth } from "../auth/with-server-auth";
import { JWTSession } from "@/lib/types/session";
import { revalidateTag } from "next/cache";
import { createCacheTag } from "@/lib/revalidation-keys";

async function _claimReward(
  session: JWTSession,
  taskId: string
): Promise<{
  success: boolean;
  data?: any;
  error?: string;
  reward?: number;
}> {
  try {
    console.log(
      "üîß [SERVER] Claiming reward for user:",
      session.id,
      "task:",
      taskId
    );

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∑–Ω–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã
    const task = await findTaskById(taskId);

    if (!task) {
      return {
        success: false,
        error: "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      };
    }

    // –ó–∞—Ç–µ–º –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    const userTask = await dbClaimTaskReward(session.id, taskId);

    console.log("‚úÖ [SERVER] Reward claimed successfully");
    revalidateTag(createCacheTag.userTasks(session.id));
    return {
      success: true,
      data: userTask,
      reward: task.reward, // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º reward –∏–∑ task
    };
  } catch (error) {
    console.error("üí• [SERVER] Error claiming reward:", error);

    return {
      success: false,
      error:
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã",
    };
  }
}

export const claimReward = withServerAuth(_claimReward);
