// lib/actions/user/get-user-onboarding-data.ts
"use server";

import {
  findUserByTelegramId,
  getUserWonGift,
  conductLootBoxDraw,
  updateUserOnboardingStatus,
  UserOnboardingStatus,
} from "database";
import { withServerAuth } from "../auth/with-server-auth";
import { JWTSession } from "@/lib/types/session";

async function _getUserOnboardingData(session: JWTSession): Promise<{
  success: boolean;
  data?: {
    onboardingStatus: UserOnboardingStatus;
    gift: {
      name: string;
      mediaUrl: string;
      revealAnimation?: string | null;
    };
  };
  error?: string;
}> {
  try {
    console.log("üìã [SERVER] Getting onboarding data for user:", session.id);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const user = await findUserByTelegramId(session.telegramId);

    if (!user) {
      throw new Error("User not found");
    }

    console.log("üë§ [SERVER] User onboarding status:", user.onboardingStatus);

    let finalStatus = user.onboardingStatus;
    let giftData = null;

    // ‚≠ê –ï–°–õ–ò –°–¢–ê–¢–£–° NEW - –°–†–ê–ó–£ –†–ê–ó–´–ì–†–´–í–ê–ï–ú –ü–û–î–ê–†–û–ö
    if (user.onboardingStatus === UserOnboardingStatus.NEW) {
      console.log("üé≤ [SERVER] Auto-drawing gift for NEW user");

      try {
        // –†–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫
        const draw = await conductLootBoxDraw(user.id);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: NEW -> GIFT_REVEALED
        await updateUserOnboardingStatus(
          user.id,
          UserOnboardingStatus.GIFT_REVEALED
        );

        finalStatus = UserOnboardingStatus.GIFT_REVEALED;

        giftData = {
          name: draw.prize.gift.name,
          mediaUrl: draw.prize.gift.mediaUrl,
          revealAnimation: draw.prize.gift.revealAnimation,
        };

        console.log("‚úÖ [SERVER] Gift auto-drawn:", giftData.name);
      } catch (drawError) {
        console.error("üí• [SERVER] Error auto-drawing gift:", drawError);
        console.error("üí• [SERVER] Draw error details:", {
          userId: user.id,
          userTelegramId: user.telegramId,
          error:
            drawError instanceof Error ? drawError.message : String(drawError),
        });
        throw drawError; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –±–æ–ª—å—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
      }
    } else if (
      user.onboardingStatus === UserOnboardingStatus.GIFT_REVEALED ||
      user.onboardingStatus === UserOnboardingStatus.CHANNELS_COMPLETED ||
      user.onboardingStatus === UserOnboardingStatus.ALL_COMPLETED ||
      user.onboardingStatus === UserOnboardingStatus.COMPLETED
    ) {
      // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
      console.log("üéÅ [SERVER] Getting existing won gift");

      const wonGift = await getUserWonGift(user.id); // –ò—Å–ø–æ–ª—å–∑—É–µ–º user.id

      if (!wonGift) {
        console.error("‚ùå [SERVER] No won gift found, attempting recovery");

        // –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ telegram ID
        const alternativeGift = await getUserWonGift(user.telegramId);

        if (!alternativeGift) {
          // –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–Ω–æ–≤–æ —Ä–∞–∑—ã–≥—Ä–∞—Ç—å
          console.log("üîÑ [SERVER] Resetting user status and redrawing");
          await updateUserOnboardingStatus(user.id, UserOnboardingStatus.NEW);

          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ
          return _getUserOnboardingData(session);
        }

        giftData = {
          name: alternativeGift.prize.gift.name,
          mediaUrl: alternativeGift.prize.gift.mediaUrl,
          revealAnimation: alternativeGift.prize.gift.revealAnimation,
        };
      } else {
        // ‚≠ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º giftData –∫–æ–≥–¥–∞ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω!
        giftData = {
          name: wonGift.prize.gift.name,
          mediaUrl: wonGift.prize.gift.mediaUrl,
          revealAnimation: wonGift.prize.gift.revealAnimation,
        };

        console.log("‚úÖ [SERVER] Existing gift found:", giftData.name);
      }
    }

    if (!giftData) {
      throw new Error("No gift data available");
    }

    return {
      success: true,
      data: {
        onboardingStatus: finalStatus,
        gift: giftData,
      },
    };
  } catch (error) {
    console.error("üí• [SERVER] Error getting onboarding data:", error);

    return {
      success: false,
      error:
        error instanceof Error
          ? error.message
          : "Failed to get onboarding data",
    };
  }
}

export const getUserOnboardingData = withServerAuth(_getUserOnboardingData);
