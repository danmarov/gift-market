// lib/types/task.ts
import { z } from "zod";
const TaskType = {
  TELEGRAM_SUBSCRIPTION: "TELEGRAM_SUBSCRIPTION",
  FREE_BONUS: "FREE_BONUS",
} as const;
export type TaskType = "TELEGRAM_SUBSCRIPTION" | "FREE_BONUS";

const TaskDuration = {
  ONE_DAY: "ONE_DAY",
  ONE_WEEK: "ONE_WEEK",
  ONE_MONTH: "ONE_MONTH",
} as const;

export type TaskDuration = "ONE_DAY" | "ONE_WEEK" | "ONE_MONTH";
export type UserTaskStatus =
  | "AVAILABLE"
  | "IN_PROGRESS"
  | "PENDING_CHECK"
  | "COMPLETED"
  | "CLAIMED";

export const createTaskSchema = z.object({
  type: z.enum(["TELEGRAM_SUBSCRIPTION", "FREE_BONUS"]),
  duration: z.enum(["ONE_DAY", "ONE_WEEK", "ONE_MONTH"]),
  title: z
    .string()
    .min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    .max(100, "–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤"),
  description: z.string().optional(),
  reward: z
    .number()
    .min(1, "–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    .max(1000, "–ú–∞–∫—Å–∏–º—É–º 1000 –∑–≤–µ–∑–¥"),
  icon: z.string().min(1, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É"),

  // üî• –î–µ–ª–∞–µ–º —ç—Ç–∏ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏
  channel_url: z.string().optional(),
  chat_id: z.string().optional(),

  max_completions: z.number().optional(),
  starts_at: z.date().optional(),
});

export const createTaskSchemaWithValidation = createTaskSchema
  .refine(
    (data) => {
      if (data.type === "TELEGRAM_SUBSCRIPTION") {
        return (
          data.channel_url &&
          data.channel_url.trim() !== "" &&
          data.chat_id &&
          data.chat_id.trim() !== ""
        );
      }
      // –î–ª—è FREE_BONUS —ç—Ç–∏ –ø–æ–ª—è –Ω–µ –Ω—É–∂–Ω—ã
      return true;
    },
    {
      message: "–°—Å—ã–ª–∞–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞",
      path: ["channel_url"],
    }
  )
  .refine(
    (data) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω
      if (data.channel_url && data.channel_url.trim() !== "") {
        try {
          new URL(data.channel_url);
          return true;
        } catch {
          return false;
        }
      }
      return true;
    },
    {
      message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª",
      path: ["channel_url"],
    }
  );

export type CreateTaskFormData = z.infer<typeof createTaskSchema>;

export const editTaskSchema = z.object({
  type: z.enum(["TELEGRAM_SUBSCRIPTION", "FREE_BONUS", "TIKTOK_COMMENT"], {
    message: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è",
  }),
  duration: z.enum(["ONE_DAY", "ONE_WEEK", "ONE_MONTH"], {
    message: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
  }),
  title: z
    .string()
    .min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    .max(100, "–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤"),
  description: z.string().optional(), // üî• –î–µ–ª–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–∞–∫ –≤ createTaskSchema
  reward: z
    .number()
    .min(1, "–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    .max(1000, "–ú–∞–∫—Å–∏–º—É–º 1000 –∑–≤–µ–∑–¥"),
  icon: z.string().min(1, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É"),

  // üî• –î–µ–ª–∞–µ–º —ç—Ç–∏ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏
  channel_url: z.string().optional(),
  chat_id: z.string().optional(),

  max_completions: z.number().optional(),
  starts_at: z.date().optional(),
  is_active: z.boolean(),
  is_visible: z.boolean(),
});

// –°—Ö–µ–º–∞ —Å —É—Å–ª–æ–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const editTaskSchemaWithValidation = editTaskSchema
  .refine(
    (data) => {
      // –ï—Å–ª–∏ —Ç–∏–ø TELEGRAM_SUBSCRIPTION, —Ç–æ channel_url –∏ chat_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
      if (data.type === "TELEGRAM_SUBSCRIPTION") {
        return (
          data.channel_url &&
          data.channel_url.trim() !== "" &&
          data.chat_id &&
          data.chat_id.trim() !== ""
        );
      }
      // –î–ª—è FREE_BONUS –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —ç—Ç–∏ –ø–æ–ª—è –Ω–µ –Ω—É–∂–Ω—ã
      return true;
    },
    {
      message: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è Telegram –ø–æ–¥–ø–∏—Å–∫–∏",
      path: ["channel_url"],
    }
  )
  .refine(
    (data) => {
      // –ï—Å–ª–∏ —Ç–∏–ø TELEGRAM_SUBSCRIPTION, —Ç–æ chat_id —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω
      if (data.type === "TELEGRAM_SUBSCRIPTION") {
        return data.chat_id && data.chat_id.trim() !== "";
      }
      return true;
    },
    {
      message: "Chat ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Telegram –ø–æ–¥–ø–∏—Å–∫–∏",
      path: ["chat_id"],
    }
  )
  .refine(
    (data) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω
      if (data.channel_url && data.channel_url.trim() !== "") {
        try {
          new URL(data.channel_url);
          return true;
        } catch {
          return false;
        }
      }
      return true;
    },
    {
      message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª",
      path: ["channel_url"],
    }
  );

// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export type EditTaskFormData = z.infer<typeof editTaskSchema>;

export type TaskActionType =
  | "timer"
  | "check"
  | "completed"
  | "available"
  | "claim";
export type TaskIconType =
  | "telegram"
  | "tiktok"
  | "youtube"
  | "instagram"
  | "twitter";
// export type User
export interface TaskWithUserStatus {
  id: string;
  type: TaskType;
  title: string;
  description?: string;
  reward: number;
  icon: TaskIconType;
  duration: TaskDuration;
  expiresAt: Date;
  maxCompletions?: number;
  userStatus: UserTaskStatus;
  startedAt?: Date;
  completedAt?: Date;
  claimedAt?: Date;

  metadata?: {
    channelUrl?: string;
    chatId?: string;
  };

  // üî• –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  isActive?: boolean;
  isVisible?: boolean;
  createdAt?: Date;
  startsAt?: Date;
  completedCount?: number;
}

export interface CategorizedTasks {
  daily: TaskWithUserStatus[];
  oneTime: TaskWithUserStatus[];
}

export interface EditTaskActionData {
  id: string;
  type: string;
  duration: string;
  title: string;
  description?: string;
  reward: number;
  icon: string;
  channelUrl?: string;
  chatId?: string;
  startsAt?: Date;
  maxCompletions?: number;
  isActive: boolean;
  isVisible: boolean;
}
